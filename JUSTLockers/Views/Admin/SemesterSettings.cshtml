@model dynamic
@{
    ViewData["Title"] = "Semester Settings - JUSTLocker";
    var hasExistingSettings = Model?.Id != null;
    var buttonText = hasExistingSettings ? "Update Semester End" : "Schedule Semester End";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/admin.css" />
    <link rel="stylesheet" href="~/css/message.css" />
    <script src="~/js/DashbordAdmin.js"></script>
    <script src="~/js/admin.js"></script>
    <style>
        .form-section {
            background: #fff;
            margin: 20px;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.08);
        }

            .form-section h2 {
                margin-bottom: 20px;
            }

        .settings-form {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

            .form-group label {
                margin-bottom: 8px;
                font-weight: 600;
            }

            .form-group input,
            .form-group select {
                padding: 10px 15px;
                border-radius: 25px;
                border: 1px solid #ccc;
                font-family: "Poppins", sans-serif;
                font-size: 0.95rem;
            }

                .form-group input:focus,
                .form-group select:focus {
                    outline: none;
                    border-color: #3b5998;
                }

        .submit-btn {
            text-align: center;
            margin-top: 20px;
        }

            .submit-btn button {
                background: linear-gradient(to right, #00c6ff, #0072ff);
                color: white;
                padding: 14px 40px;
                border: none;
                border-radius: 30px;
                font-weight: bold;
                font-size: 1rem;
                cursor: pointer;
            }

                .submit-btn button:hover {
                    opacity: 0.9;
                }

        .manual-end-btn {
            background: linear-gradient(to right, #ff416c, #ff4b2b);
        }

            .manual-end-btn:hover {
                opacity: 0.9;
            }

        body.dark-mode .form-section {
            background: #2e2e2e;
            color: #ccc;
        }

        body.dark-mode .form-group input,
        body.dark-mode .form-group select {
            background: #3a3a3a;
            color: #eee;
            border-color: #555;
        }

        .text-danger {
            color: #dc3545;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .message-container {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 1000;
            width: 350px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .message-box {
            padding: 15px 20px;
            margin-bottom: 10px;
            border-radius: 8px;
            color: white;
            opacity: 0;
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            transform: translateX(100%);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

            .message-box.show {
                opacity: 1;
                transform: translateX(0);
            }

            .message-box.success {
                background-color: #28a745;
                border-left: 5px solid #218838;
            }

            .message-box.error {
                background-color: #dc3545;
                border-left: 5px solid #c82333;
            }

            .message-box .close-btn {
                background: transparent;
                border: none;
                color: white;
                cursor: pointer;
                font-size: 1.2rem;
                margin-left: 10px;
            }

        #dateError {
            color: #721c24;
            font-size: 0.9em;
            margin-top: 8px;
            padding: 10px 15px;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            display: none;
            font-family: "Poppins", sans-serif;
            line-height: 1.4;
            position: relative;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }

            #dateError::before {
                content: "\f071";
                font-family: "Font Awesome 5 Free";
                font-weight: 900;
                margin-right: 8px;
                color: #721c24;
            }

        body.dark-mode #dateError {
            background-color: #4a1c22;
            color: #f5c6cb;
            border-color: #6b2d34;
        }

        a {
            text-decoration: none;
            color: #eee;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="brand">
            <img src="/photos/images/logo.jpeg" alt="Logo" />
            <h1>JUSTLocker</h1>
        </div>
        <ul class="menu">
            <li class="nav-item">
                <a href="@Url.Action("AdminDashboard", "Admin")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-archive"></i> Cabinet Management
                </div>
                <ul class="pretty-submenu" id="cabinet-submenu">
                    <li><a href="@Url.Action("AddCabinet", "Admin")">Add Cabinet</a></li>
                    <li><a href="@Url.Action("SignCovenant", "Admin")">Sign Covenant</a></li>
                    <li><a href="@Url.Action("ViewCabinetInfo", "Admin")">Cabinets Info</a></li>
                    <li><a href="@Url.Action("ReallocationResponse", "Admin")">Reallocation Management</a></li>

                </ul>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-user-graduate"></i> Employee Management
                </div>
                <ul class="pretty-submenu" id="Employee-submenu">
                    <li><a href="@Url.Action("ViewSupervisorInfo", "Admin")">Employees Info</a></li>
                    <li><a href="@Url.Action("AddSupervisor", "Admin")">Add Supervisor</a></li>
                </ul>
            </li>
            <li class="nav-item">
                <a href="@Url.Action("LockerIssues", "Admin")">
                    <i class="fas fa-tachometer-alt"></i> Reports
                </a>
            </li>
            <li class="nav-item">
                <a href="@Url.Action("SemesterSettings", "Admin")">
                    <i class="fas fa-cog"></i> Semester Settings
                </a>
            </li>
            <li class="nav-item logout-link">
                <form asp-action="Logout" asp-controller="Account" method="post">
                    <button type="submit">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </button>
                </form>
            </li>
        </ul>
       @*  <div class="logout-section text-center mb-3">
            <form asp-action="Logout" asp-controller="Account" method="post">
                <button type="submit" class="btn btn-danger w-100">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </form>
        </div> *@
    </aside>
    <div class="message-container" id="messageContainer"></div>

    <main class="main-content">
        <header class="hero-header">
            <img class="hero-bg" src="/photos/images/lockers.png" alt="Hero Background" />
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h2>Semester Settings</h2>
                <div class="profile">
                    <button id="dark-mode-toggle"><i class="fas fa-moon"></i></button>
                    <div class="admin-info">
                        <img src="/photos/images/adminpic.jpg" alt="Admin Profile" />
                        <span id="admin-name">@(User.Identity?.Name ?? "Admin")</span>
                    </div>
                </div>
            </div>
        </header>

        <section class="form-section">
            <h2>Manage Semester Settings</h2>

            <!-- Form for scheduling/updating semester end -->
            <form class="settings-form" asp-controller="Admin" asp-action="ScheduleSemesterEnd" method="post" id="scheduleForm">
                @Html.AntiForgeryToken()
                <input type="hidden" name="settingsId" value="@(Model?.Id)" />
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label for="endDate">Semester End Date</label>
                    <input type="datetime-local" id="endDate" name="endDate" value="@(Model?.SemesterEndDate != null ? Model.SemesterEndDate.ToString("yyyy-MM-ddTHH:mm") : "")" required />
                    <div class="text-danger" id="dateError"></div>
                </div>

                <div id="loadingIndicator" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Loading...
                </div>
                <div class="submit-btn">
                    <button type="submit" id="submitScheduleBtn">@buttonText</button>
                </div>
            </form>

            <!-- Form for manual semester end -->
            <form class="settings-form" asp-controller="Admin" asp-action="ManualSemesterEnd" method="post" id="manualForm">
                @Html.AntiForgeryToken()
                <div class="submit-btn">
                    <button type="submit" id="submitManualBtn" class="manual-end-btn">End Semester Manually</button>
                </div>
            </form>
        </section>
    </main>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const scheduleForm = document.getElementById("scheduleForm");
            const manualForm = document.getElementById("manualForm");
            const endDateInput = document.getElementById("endDate");
            const dateError = document.getElementById("dateError");
            const messageContainer = document.getElementById("messageContainer");

            // Function to show notification messages
            function showMessage(type, text) {
                const message = document.createElement("div");
                message.className = `message-box ${type}`;

                const messageText = document.createElement("span");
                messageText.textContent = text;
                message.appendChild(messageText);

                const closeBtn = document.createElement("button");
                closeBtn.className = "close-btn";
                closeBtn.innerHTML = "×";
                closeBtn.addEventListener("click", () => {
                    message.classList.remove('show');
                    setTimeout(() => message.remove(), 300);
                });
                message.appendChild(closeBtn);

                messageContainer.appendChild(message);

                setTimeout(() => message.classList.add('show'), 50);

                const autoDismiss = setTimeout(() => {
                    message.classList.remove('show');
                    setTimeout(() => message.remove(), 300);
                }, 5000);

                message.addEventListener('mouseenter', () => {
                    clearTimeout(autoDismiss);
                });

                message.addEventListener('mouseleave', () => {
                    setTimeout(() => {
                        message.classList.remove('show');
                        setTimeout(() => message.remove(), 300);
                    }, 3000);
                });
            }

            // Display TempData messages
            @if (TempData["SuccessMessage"] != null)
            {
                    <text>
                        setTimeout(() => {
                            showMessage('success', '@Html.Raw(TempData["SuccessMessage"])');
                        }, 300);
                    </text>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                    <text>
                        setTimeout(() => {
                            showMessage('error', '@Html.Raw(TempData["ErrorMessage"])');
                        }, 300);
                    </text>
            }

            // Handle schedule form submission
            scheduleForm.addEventListener("submit", async function (e) {
                e.preventDefault();

                document.getElementById('loadingIndicator').style.display = 'block';
                document.getElementById('submitScheduleBtn').disabled = true;

                const endDate = endDateInput.value;
                const settingsId = document.querySelector('input[name="settingsId"]').value;

                if (!endDate) {
                    dateError.textContent = "Please select an end date.";
                    dateError.style.display = "block";
                    showMessage('error', 'Please select an end date.');
                    document.getElementById('loadingIndicator').style.display = 'none';
                    document.getElementById('submitScheduleBtn').disabled = false;
                    return;
                }

                const formData = new FormData();
                formData.append('endDate', endDate);
                if (settingsId) {
                    formData.append('settingsId', settingsId);
                }

                try {
                    const response = await fetch('/Admin/ScheduleSemesterEnd', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        const result = await response.json();
                        if (result.success) {
                            showMessage('success', result.message);
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            showMessage('error', result.message);
                            dateError.textContent = result.message;
                            dateError.style.display = "block";
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showMessage('error', 'An error occurred while saving the semester end date.');
                    dateError.textContent = 'An error occurred while saving the semester end date.';
                    dateError.style.display = "block";
                } finally {
                    document.getElementById('loadingIndicator').style.display = 'none';
                    document.getElementById('submitScheduleBtn').disabled = false;
                }
            });

            // Handle manual end form submission
            manualForm.addEventListener("submit", async function (e) {
                e.preventDefault();

                if (!confirm('Are you sure you want to manually end the semester? This will notify users and cancel all reservations in 5 days.')) {
                    return;
                }

                document.getElementById('submitManualBtn').disabled = true;

                try {
                    const response = await fetch('/Admin/ManualSemesterEnd', {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        const result = await response.json();
                        if (result.success) {
                            showMessage('success', result.message);
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            showMessage('error', result.message);
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showMessage('error', 'An error occurred while triggering manual semester end.');
                } finally {
                    document.getElementById('submitManualBtn').disabled = false;
                }
            });

            // Dark mode toggle
            document.getElementById("dark-mode-toggle")?.addEventListener("click", function () {
                document.body.classList.toggle("dark-mode");
                const icon = this.querySelector("i");
                if (icon) {
                    icon.classList.toggle("fa-moon");
                    icon.classList.toggle("fa-sun");
                }
            });

            // Submenu toggle
            document.querySelectorAll(".submenu-toggle").forEach(toggle => {
                toggle.addEventListener("click", function () {
                    const submenu = this.nextElementSibling;
                    if (submenu) {
                        submenu.classList.toggle("show");
                    }
                });
            });
        });
    </script>
</body>
</html>