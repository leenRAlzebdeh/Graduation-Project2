@model IEnumerable<JUSTLockers.Classes.Supervisor>
@using JUSTLockers.Classes;
@{
    ViewData["Title"] = "Sign Covenant";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | @ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

    <link rel="stylesheet" href="~/css/admin.css" />
    <link rel="stylesheet" href="~/css/message.css" />
    <link rel="stylesheet" href="~/css/SupervisorView.css" />
    <style>
        a {
            text-decoration: none;
            color: #eee;
        }


</style>
</head>

<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="brand">
            <img src="/photos/images/logo.jpeg" alt="Logo" />
            <h1>JUSTLocker</h1>
        </div>
        <ul class="menu">
            <li class="nav-item">
                <a href="@Url.Action("AdminDashboard", "Admin")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-archive"></i> Cabinet Management
                </div>
                <ul class="pretty-submenu" id="cabinet-submenu">
                    <li><a href="@Url.Action("AddCabinet", "Admin")">Add Cabinet</a></li>
                    <li><a href="@Url.Action("SignCovenant", "Admin")">Sign Covenant</a></li>
                    <li><a href="@Url.Action("ViewCabinetInfo", "Admin")">Cabinets Info</a></li>
                    <li><a href="@Url.Action("ReallocationRequest", "Admin")">Reallocation Management</a></li>

                </ul>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-user-graduate"></i> Employee Management
                </div>
                <ul class="pretty-submenu" id="Employee-submenu">
                    <li><a href="@Url.Action("ViewSupervisorInfo", "Admin")">Employees Info</a></li>
                    <li><a href="@Url.Action("AddSupervisor", "Admin")">Add Supervisor</a></li>
                </ul>
            </li>
            <li class="nav-item">
                <a href="@Url.Action("LockerIssues", "Admin")">
                    <i class="fas fa-tachometer-alt"></i> Reports
                </a>
            </li>
            <li class="nav-item">
                <a href="@Url.Action("Settings", "Admin")">
                    <i class="fas fa-cog"></i> Settings
                </a>
            </li>
        </ul>
    </aside>
    <!-- Main Content -->
    <main class="main-content">
        <!-- Header -->
        <header class="hero-header">
            <img class="hero-bg" src="/photos/images/lockers.png" alt="Hero Background" />
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h2>Manage Covenants</h2>
                <div class="profile">
                    <button id="dark-mode-toggle"><i class="fas fa-moon"></i></button>
                    <div class="admin-info">
                        <img src="/photos/images/adminpic.jpg" alt="Admin Profile" />
                        <span id="admin-name">@(User.Identity?.Name ?? "Admin")</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Form Section -->
        <section class="form-section">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="message-box success">@TempData["SuccessMessage"]</div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="message-box error">@TempData["ErrorMessage"]</div>
            }

            <div class="table-responsive mb-4">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Current Location</th>
                            <th>Current Covenant</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var supervisor in Model.Distinct())
                        {
                            <tr>
                                <td>@supervisor.Id</td>
                                <td>@supervisor.Name</td>
                                <td>@supervisor.Email</td>
                                <td>@supervisor.Location</td>
                                <td>
                                    @if (supervisor.SupervisedDepartment != null)
                                    {
                                        <span class="badge bg-primary">
                                            @supervisor.SupervisedDepartment.Name (@supervisor.SupervisedDepartment.Location)
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No covenant assigned</span>
                                    }
                                </td>
                                <td class="action-buttons">
                                    <!-- Edit Button with Modal Trigger -->
                                    <button type="button" class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#editModal-@supervisor.Id">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>

                                    <!-- Delete Button -->
                                    @if (supervisor.SupervisedDepartment != null)
                                    {
                                        <form asp-action="DeleteCovenant" method="post" class="d-inline">
                                            <input type="hidden" name="supervisorId" value="@supervisor.Id" />
                                            <button type="submit" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this covenant?')">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </form>
                                    }
                                </td>
                            </tr>

                            <!-- Edit Modal for each supervisor -->
                            <div class="modal fade" id="editModal-@supervisor.Id" tabindex="-1" aria-labelledby="editModalLabel-@supervisor.Id" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="editModalLabel-@supervisor.Id">Edit Covenant for @supervisor.Name</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <form asp-action="AssignCovenant" method="post" id="covenantForm-@supervisor.Id">
                                            <div class="modal-body">
                                                <input type="hidden" name="supervisorId" value="@supervisor.Id" />
                                                <div class="mb-3">
        <label for="departmentName-@supervisor.Id" class="form-label">Department Name</label>
        <select class="form-select" id="departmentName-@supervisor.Id" name="departmentName" required>
                                                        <option value="">-- Select Department --</option>
                                                        @foreach (var department in ViewBag.Departments as List<Department>)
                                                        {
                                                            <option value="@department.Name" data-location="@department.Location">
                                                                @department.Name (@department.Location)
                                                            </option>
                                                        }
                                                    </select>
                                                    <div class="invalid-feedback" id="departmentError-@supervisor.Id"></div>
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Department Location</label>
                                                    <input type="text" class="form-control" id="departmentLocation-@supervisor.Id" name="location" readonly>
                                                </div>
                                                <div class="alert alert-danger d-none" id="assignmentError-@supervisor.Id"></div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </tbody>
                </table>
            </div>
        </section>
    </main>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Sidebar submenu toggle
        document.getElementById("cabinet-management-toggle")?.addEventListener("click", function () {
            const submenu = document.getElementById("cabinet-submenu");
            submenu.classList.toggle("show");
        });

        // Dark Mode Toggle
        document.getElementById("dark-mode-toggle")?.addEventListener("click", function () {
            document.body.classList.toggle("dark-mode");
            const icon = this.querySelector("i");
            icon.classList.toggle("fa-moon");
            icon.classList.toggle("fa-sun");
        });

        // Update location field when department is selected
        document.querySelectorAll('select[id^="departmentName-"]').forEach(select => {
            select.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                const locationField = document.getElementById(`departmentLocation-${this.id.split('-')[1]}`);
                if (selectedOption.dataset.location) {
                    locationField.value = selectedOption.dataset.location;
                } else {
                    locationField.value = '';
                }
            });
        });
                async function checkDepartmentAndLocationAssignment(departmentName, location) {
            try {
                const response = await fetch(`/Admin/IsDepartmentAssigned?departmentName=${encodeURIComponent(departmentName)}&location=${encodeURIComponent(location)}`);
                const data = await response.json();
                return data.isAssigned;
            } catch (error) {
                console.error('Error checking department assignment:', error);
                return false;
            }
        }

        // Handle department selection change
        document.querySelectorAll('select[id^="departmentName-"]').forEach(select => {
            const supervisorId = select.id.split('-')[1];
            const errorDiv = document.getElementById(`assignmentError-${supervisorId}`);
            const form = document.getElementById(`covenantForm-${supervisorId}`);

                            select.addEventListener('change', async function() {
            const selectedOption = this.options[this.selectedIndex];
            const locationField = document.getElementById(`departmentLocation-${supervisorId}`);
            const errorDiv = document.getElementById(`assignmentError-${supervisorId}`);

            if (selectedOption.dataset.location) {
                locationField.value = selectedOption.dataset.location;
            } else {
                locationField.value = '';
            }

            // Clear previous errors
            errorDiv.classList.add('d-none');
            errorDiv.textContent = '';

            // Check if both department and location are selected
            if (this.value && locationField.value) {
                const isAssigned = await checkDepartmentAndLocationAssignment(
                    this.value,
                    locationField.value
                );

                if (isAssigned) {
                    errorDiv.textContent = 'This department at this location is already assigned to another supervisor!';
                    errorDiv.classList.remove('d-none');
                }
            }
        });

            // Prevent form submission if department is already assigned
                                  form.addEventListener('submit', async function(e) {
            e.preventDefault();

            const departmentSelect = document.getElementById(`departmentName-${supervisorId}`);
            const locationField = document.getElementById(`departmentLocation-${supervisorId}`);
            const errorDiv = document.getElementById(`assignmentError-${supervisorId}`);

            // Clear previous errors
            errorDiv.classList.add('d-none');
            errorDiv.textContent = '';

            // Validate required fields
            if (!departmentSelect.value || !locationField.value) {
                errorDiv.textContent = 'Please select both department and location';
                errorDiv.classList.remove('d-none');
                return;
            }

            // Check department and location assignment
            const isAssigned = await checkDepartmentAndLocationAssignment(
                departmentSelect.value,
                locationField.value
            );

            if (isAssigned) {
                errorDiv.textContent = 'This department at this location is already assigned to another supervisor!';
                errorDiv.classList.remove('d-none');
                return;
            }

            // If validation passes, submit the form
            this.submit();
        });
        });

        // Form validation for modals
        (function () {
            'use strict'

            // Fetch all the forms we want to apply validation to
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()

             document.addEventListener('DOMContentLoaded', function() {
            // Select all message boxes
            const messages = document.querySelectorAll('.message-box');

            // Set timeout to remove each message after 10 seconds
            messages.forEach(message => {
                setTimeout(() => {
                    // First fade out
                    message.style.opacity = '0';
                    // Then remove after fade completes
                    setTimeout(() => message.remove(), 500);
                }, 10000); // 10 seconds = 10000 milliseconds
            });
        });
    </script>
    <script src="~/js/admin.js"></script>

</body>
</html>