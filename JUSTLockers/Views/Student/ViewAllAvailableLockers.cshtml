@model List<JUSTLockers.Service.WingInfo>
@{
    ViewData["Title"] = "Available Lockers";
    var filterOptions = ViewBag.FilterOptions as JUSTLockers.Service.FilterOptions;
    var currentLocation = ViewBag.CurrentLocation as string;
    var currentDepartment = ViewBag.CurrentDepartment as string;
    var currentWing = ViewBag.CurrentWing as string;
    var currentLevel = ViewBag.CurrentLevel as int?;
    var hasReservation = ViewBag.HasReservation as bool? ?? false;
    var isBlocked = ViewBag.IsBlocked as bool? ?? false;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | @ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/admin.css" />
    <style>
        .reservation-box {
            margin-top: 40px;
            padding: 25px;
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            font-family: 'Poppins', sans-serif;
        }

        .status-message {
            margin-top: 5px;
            font-size: 14px;
        }

        .success-message {
            color: #28a745;
        }

        .error-message {
            color: #dc3545;
        }

        .reservation-info {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #4B0082;
        }

        .blocked-message {
            display: @(ViewBag.IsBlocked ? "block" : "none");
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }

        .filter-section {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f1f1f1;
            border-radius: 8px;
        }

        .filter-btn {
            background-color: #4B0082;
            color: white;
            padding: 8px 16px;
            border: none;
            font-weight: 600;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .filter-btn:hover {
                background-color: #5a189a;
            }

        .clear-btn {
            background-color: #6c757d;
            color: white;
            padding: 8px 16px;
            border: none;
            font-weight: 600;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .clear-btn:hover {
                background-color: #5c636a;
            }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="brand">
            <img src="/photos/images/logo.jpeg" alt="Logo" />
            <h1>JUSTLocker</h1>
        </div>
        <ul class="menu">
            <li class="nav-item">
                <a href="@Url.Action("StudentDashboard", "Student")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-archive"></i> Report Management
                </div>
                <ul class="pretty-submenu" id="cabinet-submenu">
                    <li><a href="@Url.Action("ReportProblem", "Student")">Report Problem</a></li>
                </ul>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-user-graduate"></i> Locker Management
                </div>
                <ul class="pretty-submenu" id="Employee-submenu">
                    <li><a href="@Url.Action("ReservationView", "Student")">Reserve Locker</a></li>
                    <li><a href="@Url.Action("AllAvailableLockers", "Student")">Available Lockers</a></li>
                </ul>
            </li>

            <form asp-action="Logout" asp-controller="Account" method="post">
                <button type="submit" class="menu-item">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </button>
            </form>
        </ul>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Hero / Header Section -->
        <header class="hero-header">
            <img class="hero-bg" src="/photos/images/lockers.png" alt="Hero Background" />
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h2>Available Lockers</h2>
                <div class="profile">
                    <button id="dark-mode-toggle"><i class="fas fa-moon"></i></button>
                    <div class="admin-info">
                        <img src="/photos/images/adminpic.jpg" alt="Admin Profile" />
                        <span id="admin-name">Student</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Management Table -->
        <section class="management">
            <div class="reservation-box">
                <h2 style="color: #4B0082; margin-bottom: 20px;">View Available Lockers</h2>

                <!-- Block List Message -->
                <div class="blocked-message">
                    You are currently blocked from reserving lockers. Please contact an administrator for assistance.
                </div>

                <!-- Reservation Information Display -->
                <div id="currentReservation" class="reservation-info" style="display: @(ViewBag.HasReservation ? "block" : "none");">
                    <h4>Your Current Reservation</h4>
                    <p><strong>Locker ID:</strong> <span id="reservationLockerId">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.LockerId : "")</span></p>
                    <p><strong>Reservation Date:</strong> <span id="reservationDate">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Date : "")</span></p>
                    <p><strong>Status:</strong> <span id="reservationStatus">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Status : "")</span></p>
                    <button id="cancelReservationBtn" class="btn btn-danger btn-sm" @(ViewBag.IsBlocked ? "disabled" : "")>Cancel Reservation</button>
                    <div id="cancelStatus" class="status-message"></div>
                </div>

                <!-- Filter Section -->
                <form method="get" asp-action="AllAvailableLockers" asp-controller="Student">
                    <div class="filter-section">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label" style="color: #4B0082;">Location</label>
                                <select name="location" id="location" class="form-select" onchange="updateDepartments()">
                                    <option value="">All Locations</option>
                                    @foreach (var loc in filterOptions.Locations)
                                    {
                                        <option value="@loc" selected="@(loc == currentLocation)">@loc</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label" style="color: #4B0082;">Department</label>
                                <select name="department" id="department" class="form-select" onchange="updateWings()" disabled="@(string.IsNullOrEmpty(currentLocation))">
                                    <option value="">All Departments</option>
                                    @if (!string.IsNullOrEmpty(currentLocation) && filterOptions.DepartmentsByLocation.ContainsKey(currentLocation))
                                    {
                                        foreach (var dept in filterOptions.DepartmentsByLocation[currentLocation])
                                        {
                                            <option value="@dept" selected="@(dept == currentDepartment)">@dept</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label" style="color: #4B0082;">Wing</label>
                                <select name="wing" id="wing" class="form-select" onchange="updateLevels()"
                                        disabled="@(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment))">
                                    <option value="">All Wings</option>
                                    @if (!string.IsNullOrEmpty(currentLocation) && !string.IsNullOrEmpty(currentDepartment))
                                    {
                                        var key = $"{currentLocation}|{currentDepartment}";
                                        if (filterOptions.WingsByDeptLocation.ContainsKey(key))
                                        {
                                            foreach (var wing in filterOptions.WingsByDeptLocation[key])
                                            {
                                                <option value="@wing" selected="@(wing == currentWing)">@wing</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label" style="color: #4B0082;">Level</label>
                                <select name="level" id="level" class="form-select"
                                        disabled="@(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) || string.IsNullOrEmpty(currentWing))">
                                    <option value="">All Levels</option>
                                    @if (!string.IsNullOrEmpty(currentLocation) && !string.IsNullOrEmpty(currentDepartment) && !string.IsNullOrEmpty(currentWing))
                                    {
                                        var key = $"{currentLocation}|{currentDepartment}|{currentWing}";
                                        if (filterOptions.LevelsByWingDeptLocation.ContainsKey(key))
                                        {
                                            foreach (var lvl in filterOptions.LevelsByWingDeptLocation[key])
                                            {
                                                <option value="@lvl" selected="@(lvl == currentLevel)">Level @lvl</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label" style="color: #4B0082;">&nbsp;</label>
                                <div class="d-flex gap-2">
                                    <button type="submit" class="filter-btn w-100">Filter</button>
                                    <a href="@Url.Action("AllAvailableLockers", "Student")" class="clear-btn w-100">Clear</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

                <fieldset style="border: 2px solid #4B0082; padding: 1.5em; border-radius: 15px;">
                    <legend style="padding: 0 15px; font-weight: 600; color: #4B0082;">Available Lockers Across University</legend>

                    @if (Model == null || Model.Count == 0)
                    {
                        <div class="alert alert-warning">
                            No available lockers found with current filters.
                        </div>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Location</th>
                                    <th>Department</th>
                                    <th>Wing</th>
                                    <th>Level</th>
                                    <th>Available Lockers</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@item.Location</td>
                                        <td>@item.Department</td>
                                        <td>@item.Wing</td>
                                        <td>@item.Level</td>
                                        <td>@item.AvailableLockers</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </fieldset>
            </div>
        </section>
    </main>

    <script src="~/js/DashbordAdmin.js"></script>
    <script src="~/js/admin.js"></script>
    @* <script>
        const studentId = @ViewBag.StudentId;
        document.addEventListener("DOMContentLoaded", function () {
            const cancelReservationBtn = document.getElementById('cancelReservationBtn');
            const cancelStatusDiv = document.getElementById('cancelStatus');
            const hasReservation = @Json.Serialize(ViewBag.HasReservation);
            const isBlocked = @Json.Serialize(ViewBag.IsBlocked);

            function updateDepartments() {
                const location = document.getElementById('location').value;
                if (!location) {
                    document.getElementById('department').innerHTML = '<option value="">All Departments</option>';
                    document.getElementById('department').disabled = true;
                    document.getElementById('wing').innerHTML = '<option value="">All Wings</option>';
                    document.getElementById('wing').disabled = true;
                    document.getElementById('level').innerHTML = '<option value="">All Levels</option>';
                    document.getElementById('level').disabled = true;
                    return;
                }

                fetch(`/Student/GetDepartments?location=${encodeURIComponent(location)}`)
                    .then(response => response.json())
                    .then(data => {
                        const deptSelect = document.getElementById('department');
                        deptSelect.innerHTML = '<option value="">All Departments</option>';
                        data.forEach(dept => {
                            deptSelect.innerHTML += `<option value="${dept}">${dept}</option>`;
                        });
                        deptSelect.disabled = false;

                        document.getElementById('wing').innerHTML = '<option value="">All Wings</option>';
                        document.getElementById('wing').disabled = true;
                        document.getElementById('level').innerHTML = '<option value="">All Levels</option>';
                        document.getElementById('level').disabled = true;
                    });
            }

            function updateWings() {
                const location = document.getElementById('location').value;
                const department = document.getElementById('department').value;
                if (!location || !department) {
                    document.getElementById('wing').innerHTML = '<option value="">All Wings</option>';
                    document.getElementById('wing').disabled = true;
                    document.getElementById('level').innerHTML = '<option value="">All Levels</option>';
                    document.getElementById('level').disabled = true;
                    return;
                }

                fetch(`/Student/GetWings?location=${encodeURIComponent(location)}&department=${encodeURIComponent(department)}`)
                    .then(response => response.json())
                    .then(data => {
                        const wingSelect = document.getElementById('wing');
                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        data.forEach(wing => {
                            wingSelect.innerHTML += `<option value="${wing}">${wing}</option>`;
                        });
                        wingSelect.disabled = false;

                        document.getElementById('level').innerHTML = '<option value="">All Levels</option>';
                        document.getElementById('level').disabled = true;
                    });
            }

            function updateLevels() {
                const location = document.getElementById('location').value;
                const department = document.getElementById('department').value;
                const wing = document.getElementById('wing').value;
                if (!location || !department || !wing) {
                    document.getElementById('level').innerHTML = '<option value="">All Levels</option>';
                    document.getElementById('level').disabled = true;
                    return;
                }

                fetch(`/Student/GetLevels?location=${encodeURIComponent(location)}&department=${encodeURIComponent(department)}&wing=${encodeURIComponent(wing)}`)
                    .then(response => response.json())
                    .then(data => {
                        const levelSelect = document.getElementById('level');
                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        data.forEach(level => {
                            levelSelect.innerHTML += `<option value="${level}">Level ${level}</option>`;
                        });
                        levelSelect.disabled = false;
                    });
            }

            // Initialize filter dropdowns based on current values
        @if (!string.IsNullOrEmpty(currentLocation))
        {
            <text>
                        updateDepartments();
            </text>

            @if (!string.IsNullOrEmpty(currentDepartment))
            {
                <text>
                                updateWings();
                </text>

                @if (!string.IsNullOrEmpty(currentWing))
                {
                    <text>
                                        updateLevels();
                    </text>
                }
            }
        }

            // Handle cancel reservation
            if (cancelReservationBtn) {
                cancelReservationBtn.addEventListener('click', async function () {
                    if (isBlocked || !confirm('Are you sure you want to cancel your reservation?')) {
                        return;
                    }

                    cancelReservationBtn.disabled = true;
                    cancelStatusDiv.textContent = 'Processing...';
                    cancelStatusDiv.className = 'status-message';

                    try {
                        const response = await fetch(`/Student/CancelReservation?studentId=${studentId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            cancelStatusDiv.textContent = 'Reservation cancelled successfully';
                            cancelStatusDiv.className = 'status-message success-message';
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            throw new Error(result.message || 'Failed to cancel reservation');
                        }
                    } catch (error) {
                        console.error('Error canceling reservation:', error);
                        cancelStatusDiv.textContent = error.message || 'Failed to cancel reservation';
                        cancelStatusDiv.className = 'status-message error-message';
                        cancelReservationBtn.disabled = false;
                    }
                });
            }
        });
    </script> *@
    <script>
        const studentId = @ViewBag.StudentId;
        document.addEventListener("DOMContentLoaded", function () {
            const cancelReservationBtn = document.getElementById('cancelReservationBtn');
            const cancelStatusDiv = document.getElementById('cancelStatus');
            const hasReservation = @Json.Serialize(ViewBag.HasReservation);
            const isBlocked = @Json.Serialize(ViewBag.IsBlocked);

            function updateDepartments() {
                const location = document.getElementById('location').value;
                const departmentSelect = document.getElementById('department');
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                // Reset dependent dropdowns
                departmentSelect.innerHTML = '<option value="">All Departments</option>';
                wingSelect.innerHTML = '<option value="">All Wings</option>';
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location) {
                    departmentSelect.disabled = true;
                    wingSelect.disabled = true;
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Student/GetDepartments?location=${encodeURIComponent(location)}`)
                    .then(response => response.json())
                    .then(data => {
                        departmentSelect.innerHTML = '<option value="">All Departments</option>';
                        data.forEach(dept => {
                            departmentSelect.innerHTML += `<option value="${dept}">${dept}</option>`;
                        });
                        departmentSelect.disabled = false;

                        // Reset and disable dependent dropdowns
                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        wingSelect.disabled = true;
                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        levelSelect.disabled = true;
                    })
                    .catch(error => {
                        console.error('Error fetching departments:', error);
                    });
            }

            function updateWings() {
                const location = document.getElementById('location').value;
                const department = document.getElementById('department').value;
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                // Reset dependent dropdown
                wingSelect.innerHTML = '<option value="">All Wings</option>';
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location || !department) {
                    wingSelect.disabled = true;
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Student/GetWings?location=${encodeURIComponent(location)}&department=${encodeURIComponent(department)}`)
                    .then(response => response.json())
                    .then(data => {
                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        data.forEach(wing => {
                            wingSelect.innerHTML += `<option value="${wing}">${wing}</option>`;
                        });
                        wingSelect.disabled = false;

                        // Reset and disable dependent dropdown
                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        levelSelect.disabled = true;
                    })
                    .catch(error => {
                        console.error('Error fetching wings:', error);
                    });
            }

            function updateLevels() {
                const location = document.getElementById('location').value;
                const department = document.getElementById('department').value;
                const wing = document.getElementById('wing').value;
                const levelSelect = document.getElementById('level');

                // Reset dropdown
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location || !department || !wing) {
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Student/GetLevels?location=${encodeURIComponent(location)}&department=${encodeURIComponent(department)}&wing=${encodeURIComponent(wing)}`)
                    .then(response => response.json())
                    .then(data => {
                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        data.forEach(level => {
                            levelSelect.innerHTML += `<option value="${level}">Level ${level}</option>`;
                        });
                        levelSelect.disabled = false;
                    })
                    .catch(error => {
                        console.error('Error fetching levels:', error);
                    });
            }

            // Initialize filter dropdowns based on current values
        @if (!string.IsNullOrEmpty(currentLocation))
        {
            <text>
                    updateDepartments();
            </text>
        }

        @if (!string.IsNullOrEmpty(currentDepartment))
        {
            <text>
                    updateWings();
            </text>
        }

        @if (!string.IsNullOrEmpty(currentWing))
        {
            <text>
                    updateLevels();
            </text>
        }

            // Handle cancel reservation
            if (cancelReservationBtn) {
                cancelReservationBtn.addEventListener('click', async function () {
                    if (isBlocked || !confirm('Are you sure you want to cancel your reservation?')) {
                        return;
                    }

                    cancelReservationBtn.disabled = true;
                    cancelStatusDiv.textContent = 'Processing...';
                    cancelStatusDiv.className = 'status-message';

                    try {
                        const response = await fetch(`/Student/CancelReservation?studentId=${studentId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            cancelStatusDiv.textContent = 'Reservation cancelled successfully';
                            cancelStatusDiv.className = 'status-message success-message';
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            throw new Error(result.message || 'Failed to cancel reservation');
                        }
                    } catch (error) {
                        console.error('Error canceling reservation:', error);
                        cancelStatusDiv.textContent = error.message || 'Failed to cancel reservation';
                        cancelStatusDiv.className = 'status-message error-message';
                        cancelReservationBtn.disabled = false;
                    }
                });
            }

            // Add event listeners for dropdown changes
            document.getElementById('location').addEventListener('change', updateDepartments);
            document.getElementById('department').addEventListener('change', updateWings);
            document.getElementById('wing').addEventListener('change', updateLevels);
        });
    </script>
</body>
</html>