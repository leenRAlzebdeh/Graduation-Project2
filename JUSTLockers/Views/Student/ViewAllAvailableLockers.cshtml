
@model List<JUSTLockers.Service.WingInfo>
@{
    ViewData["Title"] = "Available Lockers";
    var filterOptions = ViewBag.FilterOptions as JUSTLockers.Service.FilterOptions;
    var currentLocation = ViewBag.CurrentLocation as string;
    var currentDepartment = ViewBag.CurrentDepartment as string;
    var currentWing = ViewBag.CurrentWing as string;
    var currentLevel = ViewBag.CurrentLevel as int?;
    var hasReservation = ViewBag.HasReservation as bool? ?? false;
    var isBlocked = ViewBag.IsBlocked as bool? ?? false;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | @ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/student.css" />

    <style>
        .main-content {
            margin-top: 0 !important;
            padding-top: 20px !important;
            flex: 1;
            /*  padding: 20px 40px 40px; */
            overflow-y: auto;
            max-width: 1200px;
            margin: auto;
        }


       

        .filter-section {
            background: #f9e7a3;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            margin-bottom: 25px;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            align-items: flex-end;
            justify-content: space-between;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            min-width: 180px;
        }

            .filter-group label {
                font-weight: 500;
                font-size: 0.95rem;
                color: #444;
                margin-bottom: 5px;
            }

            .filter-group select {
                border: 1px solid #f6db75;
                border-radius: 8px;
                padding: 8px;
                font-size: 0.95rem;
                color: #666;
            }

        .filter-button {
            background-color: #f0c419;
            border: none;
            color: #fff;
            padding: 10px 20px;
            font-weight: 600;
            font-size: 1rem;
            border-radius: 8px;
            align-self: center;
            cursor: pointer;
            height: 41px;
        }

            .filter-button:hover {
                background-color: #d4a917;
            }

        .reports-table {
            width: 100%;
            border-collapse: collapse;
        }

            .reports-table th,
            .reports-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #f6db75;
                color: #666;
            }

        .blocked-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="@Url.Action("StudentDashboard", "Student")" class="menu-item"><i class="fas fa-bars"></i><span>Dashboard</span></a>
        <a href="@Url.Action("ReservationView", "Student", new { studentId = Context.Session.GetInt32("UserId") })" class="menu-item"><i class="fas fa-lock"></i><span>Reserve</span></a>
        <a href="@Url.Action("AllAvailableLockers", "Student")" class="menu-item"><i class="fas fa-th-large"></i><span>Lockers</span></a>
        <a href="@Url.Action("ViewReservationInfo", "Student", new { studentId = Context.Session.GetInt32("UserId") })" class="menu-item"><i class="fas fa-bookmark"></i><span>My Reservation</span></a>
        <a href="@Url.Action("ReportProblem", "Student")" class="menu-item"><i class="fas fa-exclamation-circle"></i><span>Reports</span></a>
        <form asp-action="Logout" asp-controller="Account" method="post" style="width: 100%;">
            <button type="submit" class="menu-item" style="all: unset; display: flex; flex-direction: column; align-items: center; width: 100%; cursor: pointer;">
                <i class="fas fa-sign-out-alt"></i><span>Logout</span>
            </button>
        </form>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="header">
            <div class="welcome">View Available Lockers</div>
            <div class="student-info">
                <div class="info-box"><i class="fas fa-user"></i> <span id="admin-name">Loading...</span></div>
                <div class="info-box"><i class="fas fa-building"></i> <span id="major-name">Loading...</span></div>
            </div>
        </div>

       @*  <h2>View Available Lockers</h2> *@

        @if (isBlocked)
        {
            <div class="blocked-message">
                You are currently blocked from reserving lockers. Please contact an administrator.
            </div>
        }

        <form method="get" asp-action="AllAvailableLockers" asp-controller="Student">
            <div class="filter-section">
                <div class="filter-group">
                    <label for="location">Location</label>
                    <select name="location" id="location">
                        <option value="">All Locations</option>
                        @if (filterOptions?.Locations != null)
                        {
                            foreach (var loc in filterOptions.Locations)
                            {
                                <option value="@loc" selected="@(currentLocation == loc)">@loc</option>
                            }
                        }
                    </select>
                </div>
                <div class="filter-group">
                    <label for="department">Department</label>
                    <select name="department" id="department" @(string.IsNullOrEmpty(currentLocation) ? "disabled" : "")>
                        <option value="">All Departments</option>
                        @if (!string.IsNullOrEmpty(currentLocation) && filterOptions?.DepartmentsByLocation?.ContainsKey(currentLocation) == true)
                        {
                            foreach (var dept in filterOptions.DepartmentsByLocation[currentLocation])
                            {
                                <option value="@dept" selected="@(currentDepartment == dept)">@dept</option>
                            }
                        }
                    </select>
                </div>
                <div class="filter-group">
                    <label for="wing">Wing</label>
                    <select name="wing" id="wing" @(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) ? "disabled" : "")>
                        <option value="">All Wings</option>
                        @if (!string.IsNullOrEmpty(currentLocation) && !string.IsNullOrEmpty(currentDepartment))
                        {
                            var key = $"{currentLocation}|{currentDepartment}";
                            if (filterOptions?.WingsByDeptLocation?.ContainsKey(key) == true)
                            {
                                foreach (var wing in filterOptions.WingsByDeptLocation[key])
                                {
                                    <option value="@wing" selected="@(currentWing == wing)">@wing</option>
                                }
                            }
                        }
                    </select>
                </div>
                <div class="filter-group">
                    <label for="level">Level</label>
                    <select name="level" id="level" @(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) || string.IsNullOrEmpty(currentWing) ? "disabled" : "")>
                        <option value="">All Levels</option>
                        <option value="0" selected="@(currentLevel == 0)">Level 0</option>
                        <option value="1" selected="@(currentLevel == 1)">Level 1</option>
                        <option value="2" selected="@(currentLevel == 2)">Level 2</option>
                        <option value="3" selected="@(currentLevel == 3)">Level 3</option>
                    </select>
                </div>
                <button type="submit" id="filterButton" class="filter-button">
                    <i class="fas fa-filter"></i> Filter
                </button>
            </div>
        </form>

        <div class="table-responsive">
            @if (Model == null || Model.Count == 0)
            {
                <div class="alert alert-warning">No available lockers found with current filters.</div>
            }
            else
            {
                <table class="reports-table">
                    <thead>
                        <tr>
                            <th>Location</th>
                            <th>Department</th>
                            <th>Wing</th>
                            <th>Level</th>
                            <th>Available Lockers</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Location</td>
                                <td>@item.Department</td>
                                <td>@item.Wing</td>
                                <td>@item.Level</td>
                                <td>@item.AvailableLockers</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    <script src="~/js/DashbordAdmin.js"></script>
    <script>
        const studentId = "@ViewBag.StudentId";
        document.addEventListener("DOMContentLoaded", function () {
            const cancelReservationBtn = document.getElementById('cancelReservationBtn');
            const cancelStatusDiv = document.getElementById('cancelStatus');
            const hasReservation = @Html.Raw(Json.Serialize(ViewBag.HasReservation));
            const isBlocked = @Html.Raw(Json.Serialize(ViewBag.IsBlocked));

            function updateDepartments() {
                const location = document.getElementById('location').value;
                const departmentSelect = document.getElementById('department');
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                departmentSelect.innerHTML = '<option value="">All Departments</option>';
                wingSelect.innerHTML = '<option value="">All Wings</option>';
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location) {
                    departmentSelect.disabled = true;
                    wingSelect.disabled = true;
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Cabinet/GetDepartments?location=${encodeURIComponent(location)}`)
                    .then(response => response.json())
                    .then(data => {
                        departmentSelect.innerHTML = '<option value="">All Departments</option>';
                        if (Array.isArray(data)) {
                            data.forEach(dept => {
                                departmentSelect.innerHTML += `<option value="${dept}">${dept}</option>`;
                            });
                        }
                        departmentSelect.disabled = false;

                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        wingSelect.disabled = true;
                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        levelSelect.disabled = true;
                    })
                    .catch(error => {
                        console.error('Error fetching departments:', error);
                    });
            }

            function updateWings() {
                const location = document.getElementById('location').value;
                const department = document.getElementById('department').value;
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                wingSelect.innerHTML = '<option value="">All Wings</option>';
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location || !department) {
                    wingSelect.disabled = true;
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Cabinet/GetWings?departmentName=${encodeURIComponent(department)}`)
                    .then(response => response.json())
                    .then(data => {
                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        if (Array.isArray(data)) {
                            data.forEach(wing => {
                                wingSelect.innerHTML += `<option value="${wing}">${wing}</option>`;
                            });
                        }
                        wingSelect.disabled = false;

                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        levelSelect.disabled = true;
                    })
                    .catch(error => {
                        console.error('Error fetching wings:', error);
                    });
            }

            function updateLevels() {
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                levelSelect.innerHTML = '<option value="">All Levels</option>';
                levelSelect.innerHTML += '<option value="0">Level 0</option>';
                levelSelect.innerHTML += '<option value="1">Level 1</option>';
                levelSelect.innerHTML += '<option value="2">Level 2</option>';
                levelSelect.innerHTML += '<option value="3">Level 3</option>';
                levelSelect.disabled = false;
            }

        @if (!string.IsNullOrEmpty(currentLocation))
        {
            <text>
                            updateDepartments();
            </text>
        }

        @if (!string.IsNullOrEmpty(currentDepartment))
        {
            <text>
                            updateWings();
            </text>
        }

        @if (!string.IsNullOrEmpty(currentWing))
        {
            <text>
                            updateLevels();
            </text>
        }

            document.getElementById('location').addEventListener('change', updateDepartments);
            document.getElementById('department').addEventListener('change', updateWings);
            document.getElementById('wing').addEventListener('change', updateLevels);

            if (cancelReservationBtn) {
                cancelReservationBtn.addEventListener('click', async function () {
                    if (isBlocked || !confirm('Are you sure you want to cancel your reservation?')) {
                        return;
                    }

                    cancelReservationBtn.disabled = true;
                    cancelStatusDiv.textContent = 'Processing...';
                    cancelStatusDiv.className = 'status-message';

                    try {
                        const response = await fetch(`/Student/CancelReservation?studentId=${studentId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            cancelStatusDiv.textContent = 'Reservation cancelled successfully';
                            cancelStatusDiv.className = 'status-message success-message';
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            throw new Error(result.message || 'Failed to cancel reservation');
                        }
                    } catch (error) {
                        console.error('Error canceling reservation:', error);
                        cancelStatusDiv.textContent = error.message || 'Failed to cancel reservation';
                        cancelStatusDiv.className = 'status-message error-message';
                        cancelReservationBtn.disabled = false;
                    }
                });
            }


        });
    </script>

    <script>

        document.addEventListener("DOMContentLoaded", function () {


        fetch('/Dashboard/GetMajorJson')
        .then(response => response.json())
        .then(data => {
            const adminNameElement = document.getElementById("major-name");
            if (adminNameElement) {
                adminNameElement.textContent = data || "Unknown major";
            }
        })
        .catch(() => {
            const adminNameElement = document.getElementById("major-name");
            if (adminNameElement) {
                adminNameElement.textContent = "Error fetching major name";
            }
        });



        });


    </script>
</body>
</html>
