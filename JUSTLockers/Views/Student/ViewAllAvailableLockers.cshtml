


            @model List<JUSTLockers.Service.WingInfo>
@{
    ViewData["Title"] = "Available Lockers";
    var filterOptions = ViewBag.FilterOptions as JUSTLockers.Service.FilterOptions;
    var currentLocation = ViewBag.CurrentLocation as string;
    var currentDepartment = ViewBag.CurrentDepartment as string;
    var currentWing = ViewBag.CurrentWing as string;
    var currentLevel = ViewBag.CurrentLevel as int?;
    var hasReservation = ViewBag.HasReservation as bool? ?? false;
    var isBlocked = ViewBag.IsBlocked as bool? ?? false;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | @ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/admin.css" />
    <style>

        .filter-section .form-select,
        .filter-section .filter-button {
            width: 100%;
        }
        .reservation-box {
            margin-top: 40px;
            padding: 25px;
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            font-family: 'Poppins', sans-serif;
        }

        .status-message {
            margin-top: 5px;
            font-size: 14px;
        }

        .success-message {
            color: #28a745;
        }

        .error-message {
            color: #dc3545;
        }

        .reservation-info {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #4B0082;
        }

        .blocked-message {
            display: @(ViewBag.IsBlocked ? "block" : "none");
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }

        .filter-section {
            background-color: #f9fbfd;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }

        .filter-section label {
            font-weight: 500;
            font-size: 0.95rem;
        }

        .filter-section .form-select {
            width: 100%;
        }

        .filter-button {
            background-color: #0072ff !important;
            border: none;
            color: white !important;
            padding: 12px 0;
            font-weight: 600;
            font-size: 1rem;
            border-radius: 8px;
            transition: background 0.3s ease;
        }

        .filter-button:hover {
            background-color: #005ecb !important;
        }

        .fullwidth-search-container {
            position: relative;
            margin-top: 10px;
            margin-bottom: 25px;
            width: 100%;
        }

        .fullwidth-search-input {
            width: 100%;
            padding: 12px 20px 12px 45px;
            border: none;
            border-bottom: 1.5px solid #ccc;
            font-size: 1rem;
            background-color: transparent;
            font-family: 'Poppins', sans-serif;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .fullwidth-search-input:focus {
            border-color: #4361ee;
        }

        .search-icon-left {
            position: absolute;
            top: 50%;
            left: 15px;
            transform: translateY(-50%);
            font-size: 1rem;
            color: #aaa;
        }

        .table th {
            background-color: #0072ff;
            color: #fff;
            font-weight: 600;
        }

        .table td,
        .table th {
            font-size: 0.95rem;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="brand">
            <img src="/photos/images/logo.jpeg" alt="Logo" />
            <h1>JUSTLocker</h1>
        </div>
        <ul class="menu">
            <li class="nav-item">
                <a href="@Url.Action("StudentDashboard", "Student")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-archive"></i> Report Management
                </div>
                <ul class="pretty-submenu" id="cabinet-submenu">
                    <li><a href="@Url.Action("ReportProblem", "Student")">Report Problem</a></li>
                </ul>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-user-graduate"></i> Locker Management
                </div>
                <ul class="pretty-submenu" id="Employee-submenu">
                    <li><a href="@Url.Action("ReservationView", "Student")">Reserve Locker</a></li>
                    <li><a href="@Url.Action("AllAvailableLockers", "Student")">Available Lockers</a></li>
                </ul>
            </li>

            <form asp-action="Logout" asp-controller="Account" method="post">
                <button type="submit" class="menu-item">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </button>
            </form>
        </ul>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Hero / Header Section -->
        <header class="hero-header">
            <img class="hero-bg" src="/photos/images/lockers.png" alt="Hero Background" />
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h2>Available Lockers</h2>
                <div class="profile">
                    <button id="dark-mode-toggle"><i class="fas fa-moon"></i></button>
                    <div class="admin-info">
                        <img src="/photos/images/adminpic.jpg" alt="Admin Profile" />
                        <span id="admin-name">Student</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Management Table -->
        <section class="management">
            <div class="reservation-box">
                <h2 style="color: #4B0082; margin-bottom: 20px;">View Available Lockers</h2>

                <!-- Block List Message -->
                <div class="blocked-message">
                    You are currently blocked from reserving lockers. Please contact an administrator for assistance.
                </div>

                <!-- Reservation Information Display -->
                <div id="currentReservation" class="reservation-info" style="display: @(ViewBag.HasReservation ? "block" : "none");">
                    <h4>Your Current Reservation</h4>
                    <p><strong>Locker ID:</strong> <span id="reservationLockerId">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.LockerId : "")</span></p>
                    <p><strong>Reservation Date:</strong> <span id="reservationDate">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Date : "")</span></p>
                    <p><strong>Status:</strong> <span id="reservationStatus">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Status : "")</span></p>
                    <button id="cancelReservationBtn" class="btn btn-danger btn-sm" @(ViewBag.IsBlocked ? "disabled" : "")>Cancel Reservation</button>
                    <div id="cancelStatus" class="status-message"></div>
                </div>

                <!-- Filter Section -->
                <form method="get" asp-action="AllAvailableLockers" asp-controller="Student">
                    <div class="filter-section container-fluid px-4 mt-4 mb-3">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="location" class="form-label">Location</label>
                                <select name="location" id="location" class="form-select">
                                    <option value="">All Locations</option>
                                    @if (filterOptions?.Locations != null)
                                    {
                                        foreach (var loc in filterOptions.Locations)
                                        {
                                            <option value="@loc" selected="@(currentLocation == loc)">@loc</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="department" class="form-label">Department</label>
                                <select name="department" id="department" class="form-select" @(string.IsNullOrEmpty(currentLocation) ? "disabled" : "")>
                                    <option value="">All Departments</option>
                                    @if (!string.IsNullOrEmpty(currentLocation) && filterOptions?.DepartmentsByLocation?.ContainsKey(currentLocation) == true)
                                    {
                                        foreach (var dept in filterOptions.DepartmentsByLocation[currentLocation])
                                        {
                                            <option value="@dept" selected="@(currentDepartment == dept)">@dept</option>
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="wing" class="form-label">Wing</label>
                                <select name="wing" id="wing" class="form-select" @(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) ? "disabled" : "")>
                                    <option value="">All Wings</option>
                                    @if (!string.IsNullOrEmpty(currentLocation) && !string.IsNullOrEmpty(currentDepartment))
                                    {
                                        var key = $"{currentLocation}|{currentDepartment}";
                                        if (filterOptions?.WingsByDeptLocation?.ContainsKey(key) == true)
                                        {
                                            foreach (var wing in filterOptions.WingsByDeptLocation[key])
                                            {
                                                <option value="@wing" selected="@(currentWing == wing)">@wing</option>
                                            }
                                        }
                                    }
                                </select>
                            </div>
                            <div class="col-md-2">
                                <label for="level" class="form-label">Level</label>
                                <select name="level" id="level" class="form-select" @(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) || string.IsNullOrEmpty(currentWing) ? "disabled" : "")>
                                    <option value="">All Levels</option>
                                    <option value="0" selected="@(currentLevel == 0)">Level 0</option>
                                    <option value="1" selected="@(currentLevel == 1)">Level 1</option>
                                    <option value="2" selected="@(currentLevel == 2)">Level 2</option>
                                    <option value="3" selected="@(currentLevel == 3)">Level 3</option>
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="submit" id="filterButton" class="btn filter-button w-100">
                                    <i class="fas fa-filter me-2"></i> Filter
                                </button>
                            </div>
                        </div>
                    </div>
                </form>

                

                <!-- Lockers Table -->
                <div class="table-responsive">
                    @if (Model == null || Model.Count == 0)
                    {
                        <div class="alert alert-warning">
                            No available lockers found with current filters.
                        </div>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Location</th>
                                    <th>Department</th>
                                    <th>Wing</th>
                                    <th>Level</th>
                                    <th>Available Lockers</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@item.Location</td>
                                        <td>@item.Department</td>
                                        <td>@item.Wing</td>
                                        <td>@item.Level</td>
                                        <td>@item.AvailableLockers</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </section>
    </main>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/DashbordAdmin.js"></script>
    <script src="~/js/admin.js"></script>
    <script>
       const studentId = "@ViewBag.StudentId";
       document.addEventListener("DOMContentLoaded", function () {
           const cancelReservationBtn = document.getElementById('cancelReservationBtn');
           const cancelStatusDiv = document.getElementById('cancelStatus');
           const hasReservation = @Html.Raw(Json.Serialize(ViewBag.HasReservation));
           const isBlocked = @Html.Raw(Json.Serialize(ViewBag.IsBlocked));

           function updateDepartments() {
               const location = document.getElementById('location').value;
               const departmentSelect = document.getElementById('department');
               const wingSelect = document.getElementById('wing');
               const levelSelect = document.getElementById('level');

               // Reset dependent dropdowns
               departmentSelect.innerHTML = '<option value="">All Departments</option>';
               wingSelect.innerHTML = '<option value="">All Wings</option>';
               levelSelect.innerHTML = '<option value="">All Levels</option>';

               if (!location) {
                   departmentSelect.disabled = true;
                   wingSelect.disabled = true;
                   levelSelect.disabled = true;
                   return;
               }

               // Use CabinetController endpoint
               fetch(`/Cabinet/GetDepartments?location=${encodeURIComponent(location)}`)
                   .then(response => response.json())
                   .then(data => {
                       departmentSelect.innerHTML = '<option value="">All Departments</option>';
                       if (Array.isArray(data)) {
                           data.forEach(dept => {
                               departmentSelect.innerHTML += `<option value="${dept}">${dept}</option>`;
                           });
                       }
                       departmentSelect.disabled = false;

                       // Reset and disable dependent dropdowns
                       wingSelect.innerHTML = '<option value="">All Wings</option>';
                       wingSelect.disabled = true;
                       levelSelect.innerHTML = '<option value="">All Levels</option>';
                       levelSelect.disabled = true;
                   })
                   .catch(error => {
                       console.error('Error fetching departments:', error);
                   });
           }

           // Function to update wings based on selected department
           function updateWings() {
               const location = document.getElementById('location').value;
               const department = document.getElementById('department').value;
               const wingSelect = document.getElementById('wing');
               const levelSelect = document.getElementById('level');

               // Reset dependent dropdown
               wingSelect.innerHTML = '<option value="">All Wings</option>';
               levelSelect.innerHTML = '<option value="">All Levels</option>';

               if (!location || !department) {
                   wingSelect.disabled = true;
                   levelSelect.disabled = true;
                   return;
               }

               // Use CabinetController endpoint
               fetch(`/Cabinet/GetWings?departmentName=${encodeURIComponent(department)}`)
                   .then(response => response.json())
                   .then(data => {
                       wingSelect.innerHTML = '<option value="">All Wings</option>';
                       if (Array.isArray(data)) {
                           data.forEach(wing => {
                               wingSelect.innerHTML += `<option value="${wing}">${wing}</option>`;
                           });
                       }
                       wingSelect.disabled = false;

                       // Reset and disable dependent dropdown
                       levelSelect.innerHTML = '<option value="">All Levels</option>';
                       levelSelect.disabled = true;
                   })
                   .catch(error => {
                       console.error('Error fetching wings:', error);
                   });
           }

           // Function to update levels based on selected wing
           function updateLevels() {
               const wingSelect = document.getElementById('wing');
               const levelSelect = document.getElementById('level');

               levelSelect.innerHTML = '<option value="">All Levels</option>';
               levelSelect.innerHTML += '<option value="0">Level 0</option>';
               levelSelect.innerHTML += '<option value="1">Level 1</option>';
               levelSelect.innerHTML += '<option value="2">Level 2</option>';
               levelSelect.innerHTML += '<option value="3">Level 3</option>';
               levelSelect.disabled = false;
           }

           // Initialize filter dropdowns based on current values
           @if (!string.IsNullOrEmpty(currentLocation))
           {
               <text>
                   updateDepartments();
               </text>
           }

           @if (!string.IsNullOrEmpty(currentDepartment))
           {
               <text>
                   updateWings();
               </text>
           }

           @if (!string.IsNullOrEmpty(currentWing))
           {
               <text>
                   updateLevels();
               </text>
           }

           // Add event listeners for dropdown changes
           document.getElementById('location').addEventListener('change', updateDepartments);
           document.getElementById('department').addEventListener('change', updateWings);
           document.getElementById('wing').addEventListener('change', updateLevels);

           // Dark Mode Toggle
           document.getElementById("dark-mode-toggle")?.addEventListener("click", function () {
               document.body.classList.toggle("dark-mode");
               const icon = this.querySelector("i");
               icon.classList.toggle("fa-moon");
               icon.classList.toggle("fa-sun");

               // Save preference to localStorage
               const isDarkMode = document.body.classList.contains("dark-mode");
               localStorage.setItem("darkMode", isDarkMode);
           });

           // Check for saved dark mode preference
           if (localStorage.getItem("darkMode") === "true") {
               document.body.classList.add("dark-mode");
               const icon = document.getElementById("dark-mode-toggle")?.querySelector("i");
               if (icon) {
                   icon.classList.remove("fa-moon");
                   icon.classList.add("fa-sun");
               }
           }
       });
    </script>
</body>
</html>