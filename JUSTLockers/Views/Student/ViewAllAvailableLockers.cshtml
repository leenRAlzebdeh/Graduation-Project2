


               @model List<JUSTLockers.Service.WingInfo>
@{
    ViewData["Title"] = "Available Lockers";
    var filterOptions = ViewBag.FilterOptions as JUSTLockers.Service.FilterOptions;
    var currentLocation = ViewBag.CurrentLocation as string;
    var currentDepartment = ViewBag.CurrentDepartment as string;
    var currentWing = ViewBag.CurrentWing as string;
    var currentLevel = ViewBag.CurrentLevel as int?;
    var hasReservation = ViewBag.HasReservation as bool? ?? false;
    var isBlocked = ViewBag.IsBlocked as bool? ?? false;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | @ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/student.css" />
    <style>
        .main-content {
            flex: 1;
            padding: 20px 40px 40px;
            overflow-y: auto;
            animation: fadeIn 1s ease;
            max-width: 1200px;
            margin: auto;
        }

        .reservation-section {
            background: #ffffff;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            animation: slideUp 1.2s ease;
        }

            .reservation-section h2 {
                margin-bottom: 20px;
                color: #555;
            }

        .blocked-message {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
            animation: fadeIn 1s ease;
        }

        .reservation-info {
            background-color: #fdf9e8;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            animation: fadeIn 1s ease;
        }

        .filter-section {
            background: #f9e7a3;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            margin-bottom: 20px;
            animation: slideUp 1.2s ease;
        }

            .filter-section label {
                font-weight: 500;
                font-size: 0.95rem;
                color: #444;
            }

            .filter-section .form-select {
                border: 1px solid #f6db75;
                border-radius: 8px;
                padding: 8px;
                font-size: 0.95rem;
                color: #666;
            }

        .filter-button {
            background-color: #f0c419;
            border: none;
            color: #fff;
            padding: 10px;
            font-weight: 600;
            font-size: 1rem;
            border-radius: 8px;
            transition: background 0.3s ease;
        }

            .filter-button:hover {
                background-color: #d4a917;
            }

        .reports-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

            .reports-table th,
            .reports-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #f6db75;
                color: #666;
            }

        .status-message {
            margin-top: 5px;
            font-size: 14px;
        }

        .success-message {
            color: #28a745;
        }

        .error-message {
            color: #dc3545;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @@keyframes slideUp {
            from {
                transform: translateY(20px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @@keyframes blink {
            0% {
                opacity: 1;
            }

            100% {
                opacity: 0.6;
            }
        }

        @@keyframes pulse {
            0% {
                transform: scale(1);
            }

            50% {
                transform: scale(1.05);
            }

            100% {
                transform: scale(1);
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="@Url.Action("StudentDashboard", "Student")" class="menu-item">
            <i class="fas fa-bars"></i>
            <span>Dashboard</span>
        </a>
        <a href="@Url.Action("ReservationView", "Student", new { studentId = Context.Session.GetInt32("UserId") })" class="menu-item">
            <i class="fas fa-lock"></i>
            <span>Reserve</span>
        </a>
        <a href="@Url.Action("AllAvailableLockers", "Student")" class="menu-item">
            <i class="fas fa-th-large"></i>
            <span>Lockers</span>
        </a>
        <a href="@Url.Action("ViewReservationInfo", "Student", new { studentId = Context.Session.GetInt32("UserId") })" class="menu-item">
            <i class="fas fa-bookmark"></i>
            <span>My Reservation</span>
        </a>
        <a href="@Url.Action("ReportProblem", "Student")" class="menu-item">
            <i class="fas fa-exclamation-circle"></i>
            <span>Reports</span>
        </a>
        <form asp-action="Logout" asp-controller="Account" method="post" style="width: 100%;">
            <button type="submit" class="menu-item" style="all: unset; display: flex; flex-direction: column; align-items: center; width: 100%; cursor: pointer;">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </button>
        </form>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Header -->
        <div class="header">
            <div class="welcome">Welcome to JUSTLocker!</div>
            <div class="student-info">
                <div class="info-box"><i class="fas fa-user"></i> <span id="admin-name">Loading...</span></div>
                <div class="info-box"><i class="fas fa-building"></i> <span id="major-name">Loading...</span></div>
            </div>
        </div>

        <!-- Reservation Section -->
        <div class="reservation-section">
            <h2>View Available Lockers</h2>

            <!-- Block List Message -->
            <div class="blocked-message" style="display: @(isBlocked ? "block" : "none");">
                You are currently blocked from reserving lockers. Please contact an administrator for assistance.
            </div>

            <!-- Reservation Information Display -->
            

            <!-- Filter Section -->
            <form method="get" asp-action="AllAvailableLockers" asp-controller="Student">
                <div class="filter-section container-fluid px-4 mt-4 mb-3">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label for="location" class="form-label">Location</label>
                            <select name="location" id="location" class="form-select">
                                <option value="">All Locations</option>
                                @if (filterOptions?.Locations != null)
                                {
                                    foreach (var loc in filterOptions.Locations)
                                    {
                                        <option value="@loc" selected="@(currentLocation == loc)">@loc</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="department" class="form-label">Department</label>
                            <select name="department" id="department" class="form-select" @(string.IsNullOrEmpty(currentLocation) ? "disabled" : "")>
                                <option value="">All Departments</option>
                                @if (!string.IsNullOrEmpty(currentLocation) && filterOptions?.DepartmentsByLocation?.ContainsKey(currentLocation) == true)
                                {
                                    foreach (var dept in filterOptions.DepartmentsByLocation[currentLocation])
                                    {
                                        <option value="@dept" selected="@(currentDepartment == dept)">@dept</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="wing" class="form-label">Wing</label>
                            <select name="wing" id="wing" class="form-select" @(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) ? "disabled" : "")>
                                <option value="">All Wings</option>
                                @if (!string.IsNullOrEmpty(currentLocation) && !string.IsNullOrEmpty(currentDepartment))
                                {
                                    var key = $"{currentLocation}|{currentDepartment}";
                                    if (filterOptions?.WingsByDeptLocation?.ContainsKey(key) == true)
                                    {
                                        foreach (var wing in filterOptions.WingsByDeptLocation[key])
                                        {
                                            <option value="@wing" selected="@(currentWing == wing)">@wing</option>
                                        }
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="level" class="form-label">Level</label>
                            <select name="level" id="level" class="form-select" @(string.IsNullOrEmpty(currentLocation) || string.IsNullOrEmpty(currentDepartment) || string.IsNullOrEmpty(currentWing) ? "disabled" : "")>
                                <option value="">All Levels</option>
                                <option value="0" selected="@(currentLevel == 0)">Level 0</option>
                                <option value="1" selected="@(currentLevel == 1)">Level 1</option>
                                <option value="2" selected="@(currentLevel == 2)">Level 2</option>
                                <option value="3" selected="@(currentLevel == 3)">Level 3</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" id="filterButton" class="btn filter-button w-100">
                                <i class="fas fa-filter me-2"></i> Filter
                            </button>
                        </div>
                    </div>
                </div>
            </form>

            <!-- Lockers Table -->
            <div class="table-responsive">
                @if (Model == null || Model.Count == 0)
                {
                    <div class="alert alert-warning">
                        No available lockers found with current filters.
                    </div>
                }
                else
                {
                    <table class="reports-table">
                        <thead>
                            <tr>
                                <th>Location</th>
                                <th>Department</th>
                                <th>Wing</th>
                                <th>Level</th>
                                <th>Available Lockers</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.Location</td>
                                    <td>@item.Department</td>
                                    <td>@item.Wing</td>
                                    <td>@item.Level</td>
                                    <td>@item.AvailableLockers</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/DashbordAdmin.js"></script>
    <script>
        const studentId = "@ViewBag.StudentId";
        document.addEventListener("DOMContentLoaded", function () {
            const cancelReservationBtn = document.getElementById('cancelReservationBtn');
            const cancelStatusDiv = document.getElementById('cancelStatus');
            const hasReservation = @Html.Raw(Json.Serialize(ViewBag.HasReservation));
            const isBlocked = @Html.Raw(Json.Serialize(ViewBag.IsBlocked));

            function updateDepartments() {
                const location = document.getElementById('location').value;
                const departmentSelect = document.getElementById('department');
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                departmentSelect.innerHTML = '<option value="">All Departments</option>';
                wingSelect.innerHTML = '<option value="">All Wings</option>';
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location) {
                    departmentSelect.disabled = true;
                    wingSelect.disabled = true;
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Cabinet/GetDepartments?location=${encodeURIComponent(location)}`)
                    .then(response => response.json())
                    .then(data => {
                        departmentSelect.innerHTML = '<option value="">All Departments</option>';
                        if (Array.isArray(data)) {
                            data.forEach(dept => {
                                departmentSelect.innerHTML += `<option value="${dept}">${dept}</option>`;
                            });
                        }
                        departmentSelect.disabled = false;

                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        wingSelect.disabled = true;
                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        levelSelect.disabled = true;
                    })
                    .catch(error => {
                        console.error('Error fetching departments:', error);
                    });
            }

            function updateWings() {
                const location = document.getElementById('location').value;
                const department = document.getElementById('department').value;
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                wingSelect.innerHTML = '<option value="">All Wings</option>';
                levelSelect.innerHTML = '<option value="">All Levels</option>';

                if (!location || !department) {
                    wingSelect.disabled = true;
                    levelSelect.disabled = true;
                    return;
                }

                fetch(`/Cabinet/GetWings?departmentName=${encodeURIComponent(department)}`)
                    .then(response => response.json())
                    .then(data => {
                        wingSelect.innerHTML = '<option value="">All Wings</option>';
                        if (Array.isArray(data)) {
                            data.forEach(wing => {
                                wingSelect.innerHTML += `<option value="${wing}">${wing}</option>`;
                            });
                        }
                        wingSelect.disabled = false;

                        levelSelect.innerHTML = '<option value="">All Levels</option>';
                        levelSelect.disabled = true;
                    })
                    .catch(error => {
                        console.error('Error fetching wings:', error);
                    });
            }

            function updateLevels() {
                const wingSelect = document.getElementById('wing');
                const levelSelect = document.getElementById('level');

                levelSelect.innerHTML = '<option value="">All Levels</option>';
                levelSelect.innerHTML += '<option value="0">Level 0</option>';
                levelSelect.innerHTML += '<option value="1">Level 1</option>';
                levelSelect.innerHTML += '<option value="2">Level 2</option>';
                levelSelect.innerHTML += '<option value="3">Level 3</option>';
                levelSelect.disabled = false;
            }

        @if (!string.IsNullOrEmpty(currentLocation))
        {
            <text>
                        updateDepartments();
            </text>
        }

        @if (!string.IsNullOrEmpty(currentDepartment))
        {
            <text>
                        updateWings();
            </text>
        }

        @if (!string.IsNullOrEmpty(currentWing))
        {
            <text>
                        updateLevels();
            </text>
        }

            document.getElementById('location').addEventListener('change', updateDepartments);
            document.getElementById('department').addEventListener('change', updateWings);
            document.getElementById('wing').addEventListener('change', updateLevels);

            if (cancelReservationBtn) {
                cancelReservationBtn.addEventListener('click', async function () {
                    if (isBlocked || !confirm('Are you sure you want to cancel your reservation?')) {
                        return;
                    }

                    cancelReservationBtn.disabled = true;
                    cancelStatusDiv.textContent = 'Processing...';
                    cancelStatusDiv.className = 'status-message';

                    try {
                        const response = await fetch(`/Student/CancelReservation?studentId=${studentId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            cancelStatusDiv.textContent = 'Reservation cancelled successfully';
                            cancelStatusDiv.className = 'status-message success-message';
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            throw new Error(result.message || 'Failed to cancel reservation');
                        }
                    } catch (error) {
                        console.error('Error canceling reservation:', error);
                        cancelStatusDiv.textContent = error.message || 'Failed to cancel reservation';
                        cancelStatusDiv.className = 'status-message error-message';
                        cancelReservationBtn.disabled = false;
                    }
                });
            }

            fetch('/Dashboard/GetMajorJson')
                .then(response => response.json())
                .then(data => {
                    const majorNameElement = document.getElementById("major-name");
                    if (majorNameElement) {
                        majorNameElement.textContent = data || "Unknown major";
                    }
                })
                .catch(() => {
                    const majorNameElement = document.getElementById("major-name");
                    if (majorNameElement) {
                        majorNameElement.textContent = "Error fetching major name";
                    }
                });
        });
    </script>
</body>
</html>