@* <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | Locker Reservation</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/admin.css" />
    <style>
        .reservation-box {
            margin-top: 40px;
            padding: 25px;
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            font-family: 'Poppins', sans-serif;
        }

        .reserve-btn {
            background-color: #4B0082;
            color: white;
            padding: 8px 16px;
            border: none;
            font-weight: 600;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .reserve-btn:hover {
                background-color: #5a189a;
            }

            .reserve-btn:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

        .status-message {
            margin-top: 5px;
            font-size: 14px;
        }

        .success-message {
            color: #28a745;
        }

        .error-message {
            color: #dc3545;
        }

        .reservation-info {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #4B0082;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="brand">
            <img src="/photos/images/logo.jpeg" alt="Logo" />
            <h1>JUSTLocker</h1>
        </div>
        <ul class="menu">
            <li class="nav-item">
                <a href="@Url.Action("StudentDashboard", "Student")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-archive"></i> Report Management
                </div>
                <ul class="pretty-submenu" id="cabinet-submenu">
                    <li><a href="@Url.Action("ReportProblem", "Student")">Report Problem</a></li>
                </ul>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-user-graduate"></i> Locker Management
                </div>
                <ul class="pretty-submenu" id="Employee-submenu">
                    <li><a href="@Url.Action("ReservationView", "Student")">Reserve Locker</a></li>
                    <li><a href="@Url.Action("ViewReservationInfo", "Student")">My Reservation</a></li>
                </ul>
            </li>
        </ul>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Hero / Header Section -->
        <header class="hero-header">
            <img class="hero-bg" src="/photos/images/lockers.png" alt="Hero Background" />
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h2>Locker Reservation</h2>
                <div class="profile">
                    <button id="dark-mode-toggle"><i class="fas fa-moon"></i></button>
                    <div class="admin-info">
                        <img src="/photos/images/adminpic.jpg" alt="Admin Profile" />
                        <span id="admin-name">Student</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Management Table -->
        <section class="management">
            <div class="reservation-box">
                <h2 style="color: #4B0082; margin-bottom: 20px;">Reserve a Locker</h2>

                <!-- Reservation Information Display -->
                <div id="currentReservation" class="reservation-info" style="display: @(ViewBag.HasReservation ? "block" : "none");">
                    <h4>Your Current Reservation</h4>
                    <p><strong>Locker ID:</strong> <span id="reservationLockerId">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.LockerId : "")</span></p>
                    <p><strong>Reservation Date:</strong> <span id="reservationDate">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Date : "")</span></p>
                    <p><strong>Status:</strong> <span id="reservationStatus">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Status : "")</span></p>
                    <button id="cancelReservationBtn" class="btn btn-danger btn-sm">Cancel Reservation</button>
                    <div id="cancelStatus" class="status-message"></div>
                </div>

                <fieldset style="border: 2px solid #4B0082; padding: 1.5em; border-radius: 15px;">
                    <legend style="padding: 0 15px; font-weight: 600; color: #4B0082;">Available Lockers</legend>

                    <div id="noReservationMessage" style="display: @(ViewBag.HasReservation ? "block" : "none");">
                        <div class="alert alert-info">
                            You have an active reservation. Please cancel it before making a new one.
                        </div>
                    </div>

                    @if (Model.Count == 0)
                    {
                        <div class="alert alert-warning">
                            No available lockers in your department at this time.
                        </div>
                    }
                    else
                    {
                        <div id="lockersTable" style="display: @(ViewBag.HasReservation ? "none" : "block");">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Wing</th>
                                        <th>Level</th>
                                        <th>Available Lockers</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var wingInfo in Model)
                                    {
                                        <tr>
                                            <td>@wingInfo.Wing</td>
                                            <td>@wingInfo.Level</td>
                                            <td>@wingInfo.AvailableLockers</td>
                                            <td>
                                                @Html.AntiForgeryToken()
                                                <button class="reserve-btn"
                                                        data-wing="@wingInfo.Wing"
                                                        data-level="@wingInfo.Level"
                                                @(ViewBag.HasReservation ? "disabled" : "")>
                                                    @(ViewBag.HasReservation ? "Already Reserved" : "Reserve")
                                                </button>
                                                <div class="status-message" id="status-@wingInfo.Wing-@wingInfo.Level"></div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </fieldset>
            </div>
        </section>
    </main>

    <script src="~/js/DashbordAdmin.js"></script>
    <script src="~/js/admin.js"></script>
    <script>
        const studentId = @ViewBag.StudentId;
        document.addEventListener("DOMContentLoaded", function () {
            const reserveButtons = document.querySelectorAll('.reserve-btn');
            const currentReservationDiv = document.getElementById('currentReservation');
            const cancelReservationBtn = document.getElementById('cancelReservationBtn');
            const cancelStatusDiv = document.getElementById('cancelStatus');
            const lockersTable = document.getElementById('lockersTable');
            const noReservationMessage = document.getElementById('noReservationMessage');
            const hasReservation = @Json.Serialize(ViewBag.HasReservation);

            // Function to update UI based on reservation status
            function updateUI(hasReservation) {
                if (hasReservation) {
                    if (lockersTable) lockersTable.style.display = 'none';
                    noReservationMessage.style.display = 'block';
                    reserveButtons.forEach(btn => {
                        btn.disabled = true;
                        btn.textContent = 'Already Reserved';
                    });
                    currentReservationDiv.style.display = 'block';
                } else {
                    if (lockersTable) lockersTable.style.display = 'block';
                    noReservationMessage.style.display = 'none';
                    reserveButtons.forEach(btn => {
                        btn.disabled = false;
                        btn.textContent = 'Reserve';
                    });
                    currentReservationDiv.style.display = 'none';
                }
            }

            // Check if student has existing reservation
            async function checkReservation() {
                try {
                    const response = await fetch(`/Student/GetCurrentReservation?studentId=${studentId}`);
                    if (response.ok) {
                        const reservation = await response.json();
                        if (reservation && reservation.status === 'RESERVED') {
                            // Update reservation info
                            document.getElementById('reservationLockerId').textContent = reservation.lockerId;
                            document.getElementById('reservationDate').textContent = new Date(reservation.date).toLocaleString();
                            document.getElementById('reservationStatus').textContent = reservation.status;
                            updateUI(true);
                            return true;
                        } else {
                            updateUI(false);
                            return false;
                        }
                    } else {
                        updateUI(false);
                        return false;
                    }
                } catch (error) {
                    console.error('Error checking reservation:', error);
                    updateUI(false);
                    return false;
                }
            }

            // Initialize UI based on server-side data
            updateUI(hasReservation);

            // Perform client-side check to ensure consistency
            if (!hasReservation) {
                checkReservation();
            }

            // Handle reservation button clicks
            reserveButtons.forEach(button => {
                button.addEventListener('click', async function () {
                    const wing = this.dataset.wing;
                    const level = this.dataset.level;
                    const statusDiv = document.getElementById(`status-${wing}-${level}`);

                    // Check reservation status before proceeding
                    if (await checkReservation()) {
                        statusDiv.textContent = 'You already have an active reservation';
                        statusDiv.className = 'status-message error-message';
                        return;
                    }

                    // Disable button and show processing
                    this.disabled = true;
                    statusDiv.textContent = 'Processing...';
                    statusDiv.className = 'status-message';

                    try {
                        // Prepare data
                        const data = {
                            studentId: studentId,
                            departmentName: '@ViewBag.DepartmentName',
                            location: '@ViewBag.Location',
                            wing: wing,
                            level: parseInt(level)
                        };

                        // Make AJAX request
                        const response = await fetch('/Student/ReserveLocker', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.message || 'Reservation failed');
                        }

                        if (result.success) {
                            statusDiv.textContent = `Reserved successfully! Locker ID: ${result.lockerId}`;
                            statusDiv.className = 'status-message success-message';

                            // Update reservation display
                            document.getElementById('reservationLockerId').textContent = result.lockerId;
                            document.getElementById('reservationDate').textContent = new Date().toLocaleString();
                            document.getElementById('reservationStatus').textContent = 'RESERVED';
                            updateUI(true);
                        } else {
                            throw new Error(result.message || 'Reservation failed');
                        }
                    } catch (error) {
                        statusDiv.textContent = error.message;
                        statusDiv.className = 'status-message error-message';
                        this.disabled = false;
                        console.error('Reservation error:', error);
                    }
                });
            });

            // Handle cancel reservation
            if (cancelReservationBtn) {
                cancelReservationBtn.addEventListener('click', async function () {
                    if (!confirm('Are you sure you want to cancel your reservation?')) {
                        return;
                    }

                    // Disable cancel button to prevent multiple clicks
                    cancelReservationBtn.disabled = true;
                    cancelStatusDiv.textContent = 'Processing...';
                    cancelStatusDiv.className = 'status-message';

                    try {
                        const response = await fetch(`/Student/CancelReservation?studentId=${studentId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            // Update UI
                            updateUI(false);
                            // Show success message
                            cancelStatusDiv.textContent = 'Reservation cancelled successfully';
                            cancelStatusDiv.className = 'status-message success-message';
                            // Reload to update availability after a short delay
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            throw new Error(result.message || 'Failed to cancel reservation');
                        }
                    } catch (error) {
                        console.error('Error canceling reservation:', error);
                        cancelStatusDiv.textContent = error.message || 'Failed to cancel reservation';
                        cancelStatusDiv.className = 'status-message error-message';
                        cancelReservationBtn.disabled = false;
                    }
                });
            }
        });
    </script>
</body>
</html>
 *@




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | Locker Reservation</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/admin.css" />
    <style>
        .reservation-box {
            margin-top: 40px;
            padding: 25px;
            background-color: #ffffff;
            border-radius: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            font-family: 'Poppins', sans-serif;
        }

        .reserve-btn {
            background-color: #4B0082;
            color: white;
            padding: 8px 16px;
            border: none;
            font-weight: 600;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .reserve-btn:hover {
                background-color: #5a189a;
            }

            .reserve-btn:disabled {
                background-color: #cccccc;
                cursor: not-allowed;
            }

        .status-message {
            margin-top: 5px;
            font-size: 14px;
        }

        .success-message {
            color: #28a745;
        }

        .error-message {
            color: #dc3545;
        }

        .reservation-info {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            border-left: 4px solid #4B0082;
        }

        .blocked-message {
            display: @(ViewBag.IsBlocked ? "block" : "none");
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="brand">
            <img src="/photos/images/logo.jpeg" alt="Logo" />
            <h1>JUSTLocker</h1>
        </div>
        <ul class="menu">
            <li class="nav-item">
                <a href="@Url.Action("StudentDashboard", "Student")">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-archive"></i> Report Management
                </div>
                <ul class="pretty-submenu" id="cabinet-submenu">
                    <li><a href="@Url.Action("ReportProblem", "Student")">Report Problem</a></li>
                </ul>
            </li>
            <li class="has-submenu">
                <div class="submenu-toggle">
                    <i class="fas fa-user-graduate"></i> Locker Management
                </div>
                <ul class="pretty-submenu" id="Employee-submenu">
                    <li><a href="@Url.Action("ReservationView", "Student")">Reserve Locker</a></li>
                    <li><a href="@Url.Action("ViewReservationInfo", "Student")">My Reservation</a></li>
                </ul>
            </li>
        </ul>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Hero / Header Section -->
        <header class="hero-header">
            <img class="hero-bg" src="/photos/images/lockers.png" alt="Hero Background" />
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h2>Locker Reservation</h2>
                <div class="profile">
                    <button id="dark-mode-toggle"><i class="fas fa-moon"></i></button>
                    <div class="admin-info">
                        <img src="/photos/images/adminpic.jpg" alt="Admin Profile" />
                        <span id="admin-name">Student</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Management Table -->
        <section class="management">
            <div class="reservation-box">
                <h2 style="color: #4B0082; margin-bottom: 20px;">Reserve a Locker</h2>

                <!-- Block List Message -->
                <div class="blocked-message">
                    You are currently blocked from reserving lockers. Please contact an administrator for assistance.
                </div>

                <!-- Reservation Information Display -->
                <div id="currentReservation" class="reservation-info" style="display: @(ViewBag.HasReservation ? "block" : "none");">
                    <h4>Your Current Reservation</h4>
                    <p><strong>Locker ID:</strong> <span id="reservationLockerId">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.LockerId : "")</span></p>
                    <p><strong>Reservation Date:</strong> <span id="reservationDate">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Date : "")</span></p>
                    <p><strong>Status:</strong> <span id="reservationStatus">@(ViewBag.HasReservation ? ViewBag.ReservationInfo.Status : "")</span></p>
                    <button id="cancelReservationBtn" class="btn btn-danger btn-sm" @(ViewBag.IsBlocked ? "disabled" : "")>Cancel Reservation</button>
                    <div id="cancelStatus" class="status-message"></div>
                </div>

                <fieldset style="border: 2px solid #4B0082; padding: 1.5em; border-radius: 15px;">
                    <legend style="padding: 0 15px; font-weight: 600; color: #4B0082;">Available Lockers</legend>

                    <div id="noReservationMessage" style="display: @(ViewBag.HasReservation ? "block" : "none");">
                        <div class="alert alert-info">
                            You have an active reservation. Please cancel it before making a new one.
                        </div>
                    </div>

                    @if (Model.Count == 0 || ViewBag.IsBlocked)
                    {
                        <div class="alert alert-warning" style="display: @(ViewBag.IsBlocked ? "block" : (Model.Count == 0 ? "block" : "none"));">
                            @(ViewBag.IsBlocked ? "You are blocked from reserving lockers." : "No available lockers in your department at this time.")
                        </div>
                    }
                    else
                    {
                        <div id="lockersTable" style="display: @(ViewBag.HasReservation || ViewBag.IsBlocked ? "none" : "block");">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Wing</th>
                                        <th>Level</th>
                                        <th>Available Lockers</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var wingInfo in Model)
                                    {
                                        <tr>
                                            <td>@wingInfo.Wing</td>
                                            <td>@wingInfo.Level</td>
                                            <td>@wingInfo.AvailableLockers</td>
                                            <td>
                                                @Html.AntiForgeryToken()
                                                <button class="reserve-btn"
                                                        data-wing="@wingInfo.Wing"
                                                        data-level="@wingInfo.Level"
                                                @(ViewBag.HasReservation || ViewBag.IsBlocked ? "disabled" : "")>
                                                    @(ViewBag.HasReservation || ViewBag.IsBlocked ? "Already Reserved" : "Reserve")
                                                </button>
                                                <div class="status-message" id="status-@wingInfo.Wing-@wingInfo.Level"></div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </fieldset>
            </div>
        </section>
    </main>

    <script src="~/js/DashbordAdmin.js"></script>
    <script src="~/js/admin.js"></script>
    <script>
        const studentId = @ViewBag.StudentId;
        document.addEventListener("DOMContentLoaded", function () {
            const reserveButtons = document.querySelectorAll('.reserve-btn');
            const currentReservationDiv = document.getElementById('currentReservation');
            const cancelReservationBtn = document.getElementById('cancelReservationBtn');
            const cancelStatusDiv = document.getElementById('cancelStatus');
            const lockersTable = document.getElementById('lockersTable');
            const noReservationMessage = document.getElementById('noReservationMessage');
            const hasReservation = @Json.Serialize(ViewBag.HasReservation);
            const isBlocked = @Json.Serialize(ViewBag.IsBlocked);

            // Function to update UI based on reservation and block status
            function updateUI(hasReservation, isBlocked) {
                if (isBlocked) {
                    if (lockersTable) lockersTable.style.display = 'none';
                    noReservationMessage.style.display = 'none';
                    currentReservationDiv.style.display = 'none';
                    reserveButtons.forEach(btn => {
                        btn.disabled = true;
                        btn.textContent = 'Blocked';
                    });
                    cancelReservationBtn.disabled = true;
                } else if (hasReservation) {
                    if (lockersTable) lockersTable.style.display = 'none';
                    noReservationMessage.style.display = 'block';
                    reserveButtons.forEach(btn => {
                        btn.disabled = true;
                        btn.textContent = 'Already Reserved';
                    });
                    currentReservationDiv.style.display = 'block';
                    cancelReservationBtn.disabled = false;
                } else {
                    if (lockersTable) lockersTable.style.display = 'block';
                    noReservationMessage.style.display = 'none';
                    reserveButtons.forEach(btn => {
                        btn.disabled = false;
                        btn.textContent = 'Reserve';
                    });
                    currentReservationDiv.style.display = 'none';
                    cancelReservationBtn.disabled = false;
                }
            }

            // Initialize UI based on server-side data
            updateUI(hasReservation, isBlocked);

            // Perform client-side check to ensure consistency
            if (!hasReservation && !isBlocked) {
                checkReservation();
            }

            // Check if student has existing reservation
            async function checkReservation() {
                try {
                    const response = await fetch(`/Student/GetCurrentReservation?studentId=${studentId}`);
                    if (response.ok) {
                        const reservation = await response.json();
                        if (reservation && reservation.status === 'RESERVED') {
                            document.getElementById('reservationLockerId').textContent = reservation.lockerId;
                            document.getElementById('reservationDate').textContent = new Date(reservation.date).toLocaleString();
                            document.getElementById('reservationStatus').textContent = reservation.status;
                            updateUI(true, isBlocked);
                            return true;
                        } else {
                            updateUI(false, isBlocked);
                            return false;
                        }
                    } else {
                        updateUI(false, isBlocked);
                        return false;
                    }
                } catch (error) {
                    console.error('Error checking reservation:', error);
                    updateUI(false, isBlocked);
                    return false;
                }
            }

            // Handle reservation button clicks
            reserveButtons.forEach(button => {
                button.addEventListener('click', async function () {
                    if (isBlocked) return; // Prevent action if blocked

                    const wing = this.dataset.wing;
                    const level = this.dataset.level;
                    const statusDiv = document.getElementById(`status-${wing}-${level}`);

                    if (await checkReservation()) {
                        statusDiv.textContent = 'You already have an active reservation';
                        statusDiv.className = 'status-message error-message';
                        return;
                    }

                    this.disabled = true;
                    statusDiv.textContent = 'Processing...';
                    statusDiv.className = 'status-message';

                    try {
                        const data = {
                            studentId: studentId,
                            departmentName: '@ViewBag.DepartmentName',
                            location: '@ViewBag.Location',
                            wing: wing,
                            level: parseInt(level)
                        };

                        const response = await fetch('/Student/ReserveLocker', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();

                        if (!response.ok) {
                            throw new Error(result.message || 'Reservation failed');
                        }

                        if (result.success) {
                            statusDiv.textContent = `Reserved successfully! Locker ID: ${result.lockerId}`;
                            statusDiv.className = 'status-message success-message';
                            document.getElementById('reservationLockerId').textContent = result.lockerId;
                            document.getElementById('reservationDate').textContent = new Date().toLocaleString();
                            document.getElementById('reservationStatus').textContent = 'RESERVED';
                            updateUI(true, isBlocked);
                        } else {
                            throw new Error(result.message || 'Reservation failed');
                        }
                    } catch (error) {
                        statusDiv.textContent = error.message;
                        statusDiv.className = 'status-message error-message';
                        this.disabled = false;
                        console.error('Reservation error:', error);
                    }
                });
            });

            // Handle cancel reservation
            if (cancelReservationBtn) {
                cancelReservationBtn.addEventListener('click', async function () {
                    if (isBlocked || !confirm('Are you sure you want to cancel your reservation?')) {
                        return;
                    }

                    cancelReservationBtn.disabled = true;
                    cancelStatusDiv.textContent = 'Processing...';
                    cancelStatusDiv.className = 'status-message';

                    try {
                        const response = await fetch(`/Student/CancelReservation?studentId=${studentId}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();

                        if (response.ok && result.success) {
                            updateUI(false, isBlocked);
                            cancelStatusDiv.textContent = 'Reservation cancelled successfully';
                            cancelStatusDiv.className = 'status-message success-message';
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            throw new Error(result.message || 'Failed to cancel reservation');
                        }
                    } catch (error) {
                        console.error('Error canceling reservation:', error);
                        cancelStatusDiv.textContent = error.message || 'Failed to cancel reservation';
                        cancelStatusDiv.className = 'status-message error-message';
                        cancelReservationBtn.disabled = false;
                    }
                });
            }
        });
    </script>
</body>
</html>