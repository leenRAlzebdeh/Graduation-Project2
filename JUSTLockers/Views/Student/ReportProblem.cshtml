@model IEnumerable<JUSTLockers.Classes.Report>
@using JUSTLockers.Classes

@{
    ViewData["Title"] = "Report a Problem";
    int index = 0;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JUSTLocker | @ViewData["Title"]</title>

    <!-- External CSS -->
    <link rel="stylesheet" href="~/css/student.css" />
    <link rel="stylesheet" href="~/css/message.css" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

    <style>
        .main-content {
        flex: 1;
        padding: 40px;
        overflow-y: auto;
        max-width: 1100px;
        margin: auto;
        }

        .form-container {
        background: #fff;
        padding: 30px;
        border-radius: 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.06);
        }

        .form-group {
        margin-bottom: 20px;
        }

        .form-group label {
        font-weight: 500;
        color: #333;
        display: block;
        margin-bottom: 6px;
        }

        .form-group input[type="text"],
        .form-group textarea {
        width: 100%;
        padding: 12px 16px;
        border: 1.5px solid #ddd;
        border-radius: 10px;
        transition: border 0.3s;
        }

        .form-group input:focus,
        .form-group textarea:focus {
        border-color: #F0C419;
        outline: none;
        }

        .problem-type-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
        gap: 12px;
        margin-top: 10px;
        }

        .problem-option {
        background: #fff9e0;
        border: 2px solid transparent;
        border-radius: 12px;
        padding: 14px;
        text-align: center;
        cursor: pointer;
        transition: 0.3s ease;
        font-size: 14px;
        color: #444;
        font-weight: 500;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }

        .problem-option:hover {
        background-color: #fff5c3;
        }

        .problem-option.selected {
        border-color: #F0C419;
        background-color: #fff3ac;
        box-shadow: 0 0 0 3px #f0c41933;
        }

        .submit-btn {
        background: #F0C419;
        border: none;
        padding: 12px 24px;
        border-radius: 12px;
        color: #222;
        font-weight: bold;
        font-size: 16px;
        cursor: pointer;
        margin-top: 10px;
        transition: background 0.3s ease;
        }

        .submit-btn:hover {
        background: #e0b900;
        }

        /* Custom file upload */
        .custom-file-upload {
        display: flex;
        align-items: center;
        gap: 15px;
        background: #fff;
        border: 1.5px solid #ddd;
        border-radius: 10px;
        padding: 10px 14px;
        position: relative;
        }

        .custom-file-upload input[type="file"] {
        display: none;
        }

        .upload-btn {
        background: #F0C419;
        padding: 8px 16px;
        border-radius: 8px;
        color: #222;
        font-weight: 600;
        cursor: pointer;
        font-size: 14px;
        }

        .upload-btn:hover {
        background: #e0b900;
        }

        .file-name {
        font-size: 14px;
        color: #666;
        font-style: italic;
        }

        .report-container {
        margin-top: 50px;
        background: #fff;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }

        .report-header {
        font-size: 22px;
        font-weight: 600;
        color: #333;
        margin-bottom: 20px;
        }

        .report-table {
        width: 100%;
        border-collapse: collapse;
        }

        .report-table th,
        .report-table td {
        padding: 14px 12px;
        border-bottom: 1px solid #f0c419;
        text-align: left;
        font-size: 14px;
        color: #444;
        }

        .report-table tr:hover {
        background-color: #fffce6;
        cursor: pointer;
        }

        .status-tag {
        padding: 4px 10px;
        border-radius: 10px;
        font-size: 12px;
        font-weight: 600;
        }

        .status-tag.reported {
        background: #f4d55e;
        color: #7a5a00;
        }

        .status-tag.fixed {
        background: #a0e3b2;
        color: #2e7d32;
        }

        .delete-icon {
        cursor: pointer;
        font-size: 18px;
        transition: color 0.3s ease;
        }

        .delete-icon:hover {
        color: red;
        }

        .details-content {
        display: none;
        background-color: #fffdf0;
        }

        .details-row {
        padding: 20px;
        font-size: 13px;
        line-height: 1.6;
        color: #333;
        }

    </style>
</head>

<body>

    <!-- Sidebar -->
    <div class="sidebar">
        <a href="@Url.Action("StudentDashboard", "Student")" class="menu-item">
            <i class="fas fa-bars"> </i>
            <span>DashBoard</span>
        </a>
        <a href="@Url.Action("ReservationView", "Student", new { studentId = Context.Session.GetInt32("UserId") })" class="menu-item">
            <i class="fas fa-lock"></i>
            <span>Reserve</span>
        </a>
        <a href=" @Url.Action("AllAvailableLockers", "Student")" class="menu-item">
            <i class="fas fa-th-large"></i>

            <span>Lockers</span>
        </a>
        <a href="@Url.Action("ViewReservationInfo", "Student")" class="menu-item">
            <i class="fas fa-bookmark"></i>
            <span>My Reservation</span>
        </a>
        <a href="@Url.Action("ReportProblem", "Student")" class="menu-item">
            <i class="fas fa-exclamation-circle"></i>
            <span>Reports</span>
        </a>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="header">
            <div class="welcome">Report a Problem</div>
            <div class="student-info">
                <div class="info-box"><i class="fas fa-user"></i>  <span id="admin-name">Loading...</span></div>
                <div class="info-box"><i class="fas fa-building"></i> <span id="major-name">Loading...</span></div>
            </div>
        </div>
        @{
            int? userId = Context.Session.GetInt32("UserId");
        }
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="message-box success">@TempData["SuccessMessage"]</div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="message-box error">@TempData["ErrorMessage"]</div>
        }



        <div class="form-container">
            @if (@ViewBag.HasLocker == true)
            {

                <form method="post" enctype="multipart/form-data" asp-controller="Student" asp-action="SubmitProblemReport">
                    <div class="form-group">
                        <input type="hidden" name="ReportID" id="ReportID" />
                        <input type="hidden" name="ReporterId" id="ReporterId" value="@userId" />
                        <label for="lockerID">Locker ID</label>
                        <input type="text" id="LockerID" name="LockerID" required readonly />
                    </div>

                    <div class="form-group">
                        <label>Type of Problem</label>
                        <div class="problem-type-grid">
                            <div class="problem-option" data-value="LOCKED_LOCKER">🔒 Locker Locked</div>
                            <div class="problem-option"  data-value="THEFT">🕵️ Theft</div>
                            <div class="problem-option"  data-value="MAINTENANCE">🛠️ Maintenance</div>
                            <div class="problem-option"  data-value="OTHER">📝 Other</div>
                        </div>
                        <input type="hidden" name="ProblemType" id="problemTypeHidden" >
                    </div>

                    <div class="form-group">
                        <label for="subject">Subject</label>
                        <input type="text" id="subject" name="Subject" required placeholder="Short subject line..." />
                    </div>

                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="Description"  required rows="4" placeholder="Describe the issue..."></textarea>
                    </div>

                    <div class="form-group">
                        <label>Upload Image (optional)</label>
                        <div class="custom-file-upload">
                            <label for="imageUpload" class="upload-btn"><i class="fas fa-upload"></i> Choose File</label>
                            <span class="file-name">No file chosen</span>
                            <input  id="imageUpload" type="file" name="ImageFile" accept="image/*" />
                        </div>
                    </div>

                    <button type="submit" class="submit-btn">Submit Report</button>
                </form>

            }
            else
            {
                <div class="message-box error">
                    You cannot report a problem because you do not currently have a reserved locker.
                </div>
            }
        </div>
        <div class="report-container">
            <div class="report-header">My Reports</div>
            <table class="report-table">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Report</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @if (Model == null || !Model.Any()){
                    <tr>
                        <td colspan="4" class="details-row">
                            <strong style="text-align:center;">No reports found.</strong>
                        </td>
                    </tr>
                    }

                    else{

                    @foreach (var report in Model)
                    {

                        var isReported = string.Equals(report.Status.ToString(), "REPORTED", StringComparison.OrdinalIgnoreCase);
                        <tr onclick="toggleDetails(@index)">
                            <td>@(index + 1)</td>
                            <td>@report.Subject</td>
                          @*   <td class="status-tag reported">@report.Status</td> *@
                            <td><span class="status-tag reported">@report.Status</span></td>
                            <td>
                                @if (isReported)
                                {
                                    <span class="delete-icon" title="Delete" onclick="deleteReport(@report.ReportId)" event.stopPropagation();>🗑️</span>
                                }
                            </td>
                        </tr>



                       @*  <tr onclick="toggleDetails(0)">
                            <td>1</td>
                            <td>Broken Locker</td>
                            <td><span class="status-tag reported">REPORTED</span></td>
                            <td><span class="delete-icon" title="Delete" onclick="deleteReport(1); event.stopPropagation();">🗑️</span></td>
                        </tr> *@
                        <tr id="details-@index" class="details-content">
                            <td colspan="4" class="details-row">
                                <strong>Statement:</strong> @report.Statement<br />
                                <strong>Report Date:</strong> @report.ReportDate.ToString("yyyy-MM-dd")<br />
                                <strong>Resolved Date:</strong> @(report.ResolvedDate?.ToString("yyyy-MM-dd") ?? "Not resolved")<br />
                                <strong>Resolution Details:</strong> @(report.ResolutionDetails ?? "Not solved ")<br />
                                @if (report.ImageData != null && !string.IsNullOrEmpty(report.ImageMimeType))
                                {
                                    var base64 = Convert.ToBase64String(report.ImageData);
                                    var imgSrc = $"data:{report.ImageMimeType};base64,{base64}";
                                    <div><strong>Image:</strong><br /><img src="@imgSrc" alt="Report Image" style="max-width: 200px; border: 1px solid #ccc; margin-top: 5px;" /></div>
                                }
                            </td>
                        </tr>
                        index++;



@* 
                        <tr id="details-0" class="details-content">
                            <td colspan="4" class="details-row">
                                <strong>Statement:</strong> Lock not working properly<br />
                                <strong>Report Date:</strong> 2025-04-10<br />
                                <strong>Resolved Date:</strong> Not resolved<br />
                                <strong>Resolution Details:</strong> Not solved<br />
                                <div><strong>Image:</strong><br /><img src="locker-example.jpg" style="max-width: 200px; border: 1px solid #ccc; margin-top: 5px;" /></div>
                            </td>
                        </tr> *@

                       
                    }
                    }
                </tbody>
            </table>
        </div>

    </div>

    <!-- JS -->
    <script>
          // Card selector
          const options = document.querySelectorAll(".problem-option");
          const hiddenInput = document.getElementById("problemTypeHidden");

          options.forEach(option => {
              option.addEventListener("click", () => {
                  options.forEach(o => o.classList.remove("selected"));
                  option.classList.add("selected");
                  hiddenInput.value = option.getAttribute("data-value");
              });
          });

          // File name preview
          const fileInput = document.getElementById("imageUpload");
          const fileNameSpan = document.querySelector(".file-name");

          fileInput.addEventListener("change", () => {
              fileNameSpan.textContent = fileInput.files.length > 0 ? fileInput.files[0].name : "No file chosen";
          });

              function toggleDetails(index) {
          const row = document.getElementById(`details-${index}`);
              if (row) row.style.display = row.style.display === 'table-row' ? 'none' : 'table-row';
        }

               function deleteReport(reportId) {
            event.stopPropagation();
            if (confirm("Are you sure you want to delete this report?")) {
                window.location.href = `/Student/DeleteReport/${reportId}`;
            }
        }


    </script>

     <script src="~/js/DashbordAdmin.js"></script>
    @*  <script src="~/js/admin.js"></script> *@

    <script>
                document.querySelector('input[name="ImageFile"]').addEventListener('change', function (event) {
            const file = event.target.files[0];  // Get the selected file
            if (file) {
                const mimeType = file.type;  // This is the MIME type (e.g., "image/png", "image/jpeg")
                console.log("Mime Type: ", mimeType);  // You can check this in the console for debugging
            }
        });



        document.addEventListener("DOMContentLoaded", function () {
            const reporterInput = document.getElementById("ReporterId");
            const lockerInput = document.getElementById("LockerID");

            if (reporterInput && lockerInput) {
                const reporterId = reporterInput.value;

                fetch(`/Student/GetLockerIDJson?ReporterId=${encodeURIComponent(reporterId)}`)
                    .then(response => response.json())
                    .then(data => {
                        lockerInput.value = data || "N/A";
                    })
                    .catch(() => {
                        lockerInput.value = "Error fetching Locker ID";
                    });
            }



             fetch('/Student/GetLastReportIDJson')
            .then(response => response.json())
            .then(data => {
                const Input = document.getElementById("ReportID");
                if (Input) {
                    const lastReportNumber = parseInt(data) + 1;
                    Input.value = lastReportNumber || "1";
                }
            })
            .catch(() => {
                const Input = document.getElementById("ReportID");
                if (Input) {
                    Input.value = "Error fetching Report id";
                }
            });

        });
    </script>

    <script>

        document.addEventListener("DOMContentLoaded", function () {


        fetch('/Dashboard/GetMajorJson')
        .then(response => response.json())
        .then(data => {
            const adminNameElement = document.getElementById("major-name");
            if (adminNameElement) {
                adminNameElement.textContent = data || "Unknown major";
            }
        })
        .catch(() => {
            const adminNameElement = document.getElementById("major-name");
            if (adminNameElement) {
                adminNameElement.textContent = "Error fetching major name";
            }
        });



        });


    </script>
   @*  <script>
        function toggleDetails(index) {
            const row = document.getElementById("details-" + index);
            row.classList.toggle("show");
        }

        function deleteReport(reportId) {
            event.stopPropagation();
            if (confirm("Are you sure you want to delete this report?")) {
                window.location.href = `/Student/DeleteReport/${reportId}`;
            }
        }
    </script>
 *@

</body>
</html>
